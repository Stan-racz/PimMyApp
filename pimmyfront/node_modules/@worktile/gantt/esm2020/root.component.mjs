import { Component, ElementRef, Inject, ContentChild, Input, Optional, ViewChild } from '@angular/core';
import { GanttDomService, ScrollDirection } from './gantt-dom.service';
import { GanttDragContainer } from './gantt-drag-container';
import { take, takeUntil, startWith } from 'rxjs/operators';
import { from, Subject } from 'rxjs';
import { GANTT_UPPER_TOKEN } from './gantt-upper';
import { passiveListenerOptions } from './utils/passive-listeners';
import { GanttDragBackdropComponent } from './components/drag-backdrop/drag-backdrop.component';
import { GanttDate } from './utils/date';
import * as i0 from "@angular/core";
import * as i1 from "./gantt-dom.service";
import * as i2 from "./gantt-drag-container";
import * as i3 from "./gantt-print.service";
import * as i4 from "./components/calendar/calendar.component";
import * as i5 from "./components/drag-backdrop/drag-backdrop.component";
import * as i6 from "@angular/common";
import * as i7 from "./gantt-upper";
export class NgxGanttRootComponent {
    constructor(elementRef, ngZone, dom, dragContainer, ganttUpper, printService) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.dom = dom;
        this.dragContainer = dragContainer;
        this.ganttUpper = ganttUpper;
        this.printService = printService;
        this.unsubscribe$ = new Subject();
        this.ganttUpper.dragContainer = dragContainer;
    }
    get view() {
        return this.ganttUpper.view;
    }
    ngOnInit() {
        // Note: the zone may be nooped through `BootstrapOptions` when bootstrapping the root module. This means
        // the `onStable` will never emit any value.
        const onStable$ = this.ngZone.isStable ? from(Promise.resolve()) : this.ngZone.onStable.pipe(take(1));
        // Normally this isn't in the zone, but it can cause performance regressions for apps
        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.
        this.ngZone.runOutsideAngular(() => {
            onStable$.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
                this.dom.initialize(this.elementRef);
                if (this.printService) {
                    this.printService.register(this.elementRef);
                }
                this.setupScrollClass();
                this.setupResize();
                this.setupViewScroll();
                // 优化初始化时Scroll滚动体验问题，通过透明度解决，默认透明度为0，滚动结束后恢复
                this.elementRef.nativeElement.style.opacity = '1';
                this.ganttUpper.viewChange.pipe(startWith(null), takeUntil(this.unsubscribe$)).subscribe(() => {
                    this.scrollToToday();
                });
            });
        });
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
    }
    setupViewScroll() {
        if (this.ganttUpper.disabledLoadOnScroll) {
            return;
        }
        this.dom
            .getViewerScroll(passiveListenerOptions)
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe((event) => {
            if (event.direction === ScrollDirection.LEFT) {
                const dates = this.view.addStartDate();
                if (dates) {
                    event.target.scrollLeft += this.view.getDateRangeWidth(dates.start, dates.end);
                    if (this.ganttUpper.loadOnScroll.observers) {
                        this.ngZone.run(() => this.ganttUpper.loadOnScroll.emit({ start: dates.start.getUnixTime(), end: dates.end.getUnixTime() }));
                    }
                }
            }
            if (event.direction === ScrollDirection.RIGHT) {
                const dates = this.view.addEndDate();
                if (dates && this.ganttUpper.loadOnScroll.observers) {
                    this.ngZone.run(() => this.ganttUpper.loadOnScroll.emit({ start: dates.start.getUnixTime(), end: dates.end.getUnixTime() }));
                }
            }
        });
    }
    setupResize() {
        this.dom
            .getResize()
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(() => {
            this.setupScrollClass();
        });
    }
    setupScrollClass() {
        const mainContainer = this.dom.mainContainer;
        const height = mainContainer.offsetHeight;
        const scrollHeight = mainContainer.scrollHeight;
        if (scrollHeight > height) {
            this.elementRef.nativeElement.className = 'gantt gantt-scroll';
        }
        else {
            this.elementRef.nativeElement.className = 'gantt';
        }
    }
    scrollToToday() {
        const x = this.view.getTodayXPoint();
        this.dom.scrollMainContainer(x);
    }
    scrollToDate(date) {
        let x;
        if (typeof date === 'number') {
            x = this.view.getXPointByDate(new GanttDate(date));
        }
        else {
            x = this.view.getXPointByDate(date);
        }
        this.dom.scrollMainContainer(x);
    }
}
NgxGanttRootComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: NgxGanttRootComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.GanttDomService }, { token: i2.GanttDragContainer }, { token: GANTT_UPPER_TOKEN }, { token: i3.GanttPrintService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NgxGanttRootComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.9", type: NgxGanttRootComponent, selector: "ngx-gantt-root", inputs: { sideWidth: "sideWidth" }, host: { classAttribute: "gantt" }, providers: [GanttDomService, GanttDragContainer], queries: [{ propertyName: "sideTemplate", first: true, predicate: ["sideTemplate"], descendants: true, static: true }, { propertyName: "mainTemplate", first: true, predicate: ["mainTemplate"], descendants: true, static: true }], viewQueries: [{ propertyName: "backdrop", first: true, predicate: GanttDragBackdropComponent, descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<div class=\"gantt-side\" [style.width.px]=\"sideWidth\">\n  <div class=\"gantt-side-container\">\n    <ng-template [ngTemplateOutlet]=\"sideTemplate\"></ng-template>\n  </div>\n</div>\n<div class=\"gantt-container\">\n  <gantt-calendar-overlay></gantt-calendar-overlay>\n  <gantt-drag-backdrop></gantt-drag-backdrop>\n  <div class=\"gantt-main\">\n    <ng-template [ngTemplateOutlet]=\"mainTemplate\"></ng-template>\n  </div>\n</div>\n", components: [{ type: i4.GanttCalendarComponent, selector: "gantt-calendar-overlay" }, { type: i5.GanttDragBackdropComponent, selector: "gantt-drag-backdrop" }], directives: [{ type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: NgxGanttRootComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-gantt-root', providers: [GanttDomService, GanttDragContainer], host: {
                        class: 'gantt'
                    }, template: "<div class=\"gantt-side\" [style.width.px]=\"sideWidth\">\n  <div class=\"gantt-side-container\">\n    <ng-template [ngTemplateOutlet]=\"sideTemplate\"></ng-template>\n  </div>\n</div>\n<div class=\"gantt-container\">\n  <gantt-calendar-overlay></gantt-calendar-overlay>\n  <gantt-drag-backdrop></gantt-drag-backdrop>\n  <div class=\"gantt-main\">\n    <ng-template [ngTemplateOutlet]=\"mainTemplate\"></ng-template>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.GanttDomService }, { type: i2.GanttDragContainer }, { type: i7.GanttUpper, decorators: [{
                    type: Inject,
                    args: [GANTT_UPPER_TOKEN]
                }] }, { type: i3.GanttPrintService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { sideWidth: [{
                type: Input
            }], sideTemplate: [{
                type: ContentChild,
                args: ['sideTemplate', { static: true }]
            }], mainTemplate: [{
                type: ContentChild,
                args: ['mainTemplate', { static: true }]
            }], backdrop: [{
                type: ViewChild,
                args: [GanttDragBackdropComponent, { static: true, read: ElementRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,