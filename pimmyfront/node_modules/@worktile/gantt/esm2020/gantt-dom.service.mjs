import { isPlatformServer } from '@angular/common';
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { fromEvent, Subject, merge, EMPTY, Observable } from 'rxjs';
import { pairwise, map, auditTime, takeUntil } from 'rxjs/operators';
import { isNumber } from './utils/helpers';
import { passiveListenerOptions } from './utils/passive-listeners';
import * as i0 from "@angular/core";
const scrollThreshold = 50;
export var ScrollDirection;
(function (ScrollDirection) {
    ScrollDirection[ScrollDirection["NONE"] = 0] = "NONE";
    ScrollDirection[ScrollDirection["LEFT"] = 1] = "LEFT";
    ScrollDirection[ScrollDirection["RIGHT"] = 2] = "RIGHT";
})(ScrollDirection || (ScrollDirection = {}));
export class GanttDomService {
    constructor(ngZone, platformId) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.unsubscribe$ = new Subject();
    }
    monitorScrollChange() {
        this.ngZone.runOutsideAngular(() => merge(fromEvent(this.mainContainer, 'scroll', passiveListenerOptions), fromEvent(this.sideContainer, 'scroll', passiveListenerOptions))
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe((event) => {
            this.syncScroll(event);
        }));
        // fromEvent(this.mainContainer, 'scroll')
        //     .pipe(startWith(), takeUntil(this.unsubscribe$))
        //     .subscribe((event) => {
        //         // if (this.mainContainer.scrollLeft > 0) {
        //         //     this.side.classList.add('gantt-side-has-shadow');
        //         // } else {
        //         //     this.side.classList.remove('gantt-side-has-shadow');
        //         // }
        //     });
    }
    syncScroll(event) {
        const target = event.currentTarget;
        this.calendarOverlay.scrollLeft = this.mainContainer.scrollLeft;
        this.sideContainer.scrollTop = target.scrollTop;
        this.mainContainer.scrollTop = target.scrollTop;
    }
    disableBrowserWheelEvent() {
        const container = this.mainContainer;
        this.ngZone.runOutsideAngular(() => fromEvent(container, 'wheel')
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe((event) => {
            const delta = event.deltaX;
            if (!delta) {
                return;
            }
            if ((container.scrollLeft + container.offsetWidth === container.scrollWidth && delta > 0) ||
                (container.scrollLeft === 0 && delta < 0)) {
                event.preventDefault();
            }
        }));
    }
    initialize(root) {
        this.root = root.nativeElement;
        this.side = this.root.getElementsByClassName('gantt-side')[0];
        this.container = this.root.getElementsByClassName('gantt-container')[0];
        this.sideContainer = this.root.getElementsByClassName('gantt-side-container')[0];
        this.mainContainer = this.root.getElementsByClassName('gantt-main-container')[0];
        this.calendarOverlay = this.root.getElementsByClassName('gantt-calendar-overlay')[0];
        this.monitorScrollChange();
        this.disableBrowserWheelEvent();
    }
    /**
     * @returns An observable that will emit outside the Angular zone. Note, consumers should re-enter the Angular zone
     * to run the change detection if needed.
     */
    getViewerScroll(options) {
        return new Observable((subscriber) => this.ngZone.runOutsideAngular(() => fromEvent(this.mainContainer, 'scroll', options)
            .pipe(map(() => this.mainContainer.scrollLeft), pairwise(), map(([previous, current]) => {
            const event = {
                target: this.mainContainer,
                direction: ScrollDirection.NONE
            };
            if (current - previous < 0) {
                if (this.mainContainer.scrollLeft < scrollThreshold && this.mainContainer.scrollLeft > 0) {
                    event.direction = ScrollDirection.LEFT;
                }
            }
            if (current - previous > 0) {
                if (this.mainContainer.scrollWidth - this.mainContainer.clientWidth - this.mainContainer.scrollLeft <
                    scrollThreshold) {
                    event.direction = ScrollDirection.RIGHT;
                }
            }
            return event;
        }))
            .subscribe(subscriber)));
    }
    getResize() {
        return isPlatformServer(this.platformId) ? EMPTY : fromEvent(window, 'resize').pipe(auditTime(150));
    }
    scrollMainContainer(left) {
        if (isNumber(left)) {
            const scrollLeft = left - this.mainContainer.clientWidth / 2;
            this.mainContainer.scrollLeft = scrollLeft > scrollThreshold ? scrollLeft : 0;
            this.calendarOverlay.scrollLeft = this.mainContainer.scrollLeft;
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
GanttDomService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttDomService, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable });
GanttDomService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttDomService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttDomService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,