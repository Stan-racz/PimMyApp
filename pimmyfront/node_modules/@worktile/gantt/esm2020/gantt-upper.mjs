import { Input, Output, EventEmitter, ContentChild, HostBinding, InjectionToken, Directive, Inject } from '@angular/core';
import { from, Subject } from 'rxjs';
import { takeUntil, take, skip } from 'rxjs/operators';
import { GanttViewType, GanttGroupInternal, GanttItemInternal } from './class';
import { createViewFactory } from './views/factory';
import { GanttDate } from './utils/date';
import { defaultStyles } from './gantt.styles';
import { uniqBy, flatten, recursiveItems, getFlatItems, keyBy } from './utils/helpers';
import { GANTT_GLOBAL_CONFIG, defaultConfig } from './gantt.config';
import { SelectionModel } from '@angular/cdk/collections';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { GanttBaselineItemInternal } from './class/baseline';
import * as i0 from "@angular/core";
export class GanttUpper {
    constructor(elementRef, cdr, ngZone, config) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.ngZone = ngZone;
        this.config = config;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.originItems = [];
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.originGroups = [];
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.originBaselineItems = [];
        this.viewType = GanttViewType.month;
        this.showTodayLine = true;
        this.viewOptions = {};
        this.loadOnScroll = new EventEmitter();
        this.dragStarted = new EventEmitter();
        this.dragMoved = new EventEmitter();
        this.dragEnded = new EventEmitter();
        this.barClick = new EventEmitter();
        this.linkDragEnded = new EventEmitter();
        this.items = [];
        this.groups = [];
        this.baselineItems = [];
        this.baselineItemsMap = {};
        this.viewChange = new EventEmitter();
        this.expandChange = new EventEmitter();
        this.firstChange = true;
        this.unsubscribe$ = new Subject();
        this._selectable = false;
        this._multiple = false;
        this.ganttClass = true;
    }
    set linkOptions(options) {
        this._linkOptions = options;
    }
    get linkOptions() {
        return Object.assign({}, defaultConfig.linkOptions, this.config.linkOptions, this._linkOptions);
    }
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
        if (this._selectable) {
            this.selectionModel = this.initSelectionModel();
        }
        else {
            this.selectionModel?.clear();
        }
    }
    get selectable() {
        return this._selectable;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
        if (this.selectable) {
            this.selectionModel = this.initSelectionModel();
        }
    }
    get multiple() {
        return this._multiple;
    }
    get element() {
        return this.elementRef.nativeElement;
    }
    createView() {
        const viewDate = this.getViewDate();
        this.view = createViewFactory(this.viewType, viewDate.start, viewDate.end, this.viewOptions);
    }
    setupGroups() {
        const collapsedIds = this.groups.filter((group) => group.expanded === false).map((group) => group.id);
        this.groupsMap = {};
        this.groups = [];
        this.originGroups.forEach((origin) => {
            const group = new GanttGroupInternal(origin);
            group.expanded = !collapsedIds.includes(group.id);
            this.groupsMap[group.id] = group;
            this.groups.push(group);
        });
    }
    setupItems() {
        this.originItems = uniqBy(this.originItems, 'id');
        this.items = [];
        if (this.groups.length > 0) {
            this.originItems.forEach((origin) => {
                const group = this.groupsMap[origin.group_id];
                if (group) {
                    const item = new GanttItemInternal(origin, { viewType: this.viewType });
                    group.items.push(item);
                }
            });
        }
        else {
            this.originItems.forEach((origin) => {
                const item = new GanttItemInternal(origin, { viewType: this.viewType });
                this.items.push(item);
            });
        }
    }
    setupBaselineItems() {
        this.originBaselineItems = uniqBy(this.originBaselineItems, 'id');
        this.baselineItems = [];
        this.originBaselineItems.forEach((origin) => {
            const item = new GanttBaselineItemInternal(origin);
            this.baselineItems.push(item);
        });
        this.baselineItemsMap = keyBy(this.baselineItems, 'id');
    }
    setupExpandedState() {
        this.originItems = uniqBy(this.originItems, 'id');
        let items = [];
        const flatOriginItems = getFlatItems(this.originItems);
        if (this.items.length > 0) {
            items = recursiveItems(this.items);
        }
        else {
            items = flatten(this.groups.map((group) => recursiveItems(group.items)));
        }
        items.forEach((item) => {
            if (item.origin.expanded) {
                const newItem = flatOriginItems.find((originItem) => originItem.id === item.id);
                if (newItem) {
                    if (newItem.expanded === undefined) {
                        newItem.expanded = true;
                    }
                }
            }
        });
    }
    getViewDate() {
        let start = this.start;
        let end = this.end;
        if (!this.start || !this.end) {
            this.originItems.forEach((item) => {
                if (item.start && !this.start) {
                    start = start ? Math.min(start, item.start) : item.start;
                }
                if (item.end && !this.end) {
                    end = end ? Math.max(end, item.end) : item.end;
                }
            });
        }
        return {
            start: {
                date: new GanttDate(start),
                isCustom: this.start ? true : false
            },
            end: {
                date: new GanttDate(end),
                isCustom: this.end ? true : false
            }
        };
    }
    computeRefs() {
        this.groups.forEach((group) => {
            const groupItems = recursiveItems(group.items);
            this.computeItemsRefs(...groupItems);
        });
        const items = recursiveItems(this.items);
        this.computeItemsRefs(...items);
    }
    expandGroups(expanded) {
        this.groups.forEach((group) => {
            group.setExpand(expanded);
        });
        this.expandChange.next();
        this.cdr.detectChanges();
    }
    initSelectionModel() {
        return new SelectionModel(this.multiple, []);
    }
    ngOnInit() {
        this.styles = Object.assign({}, defaultStyles, this.styles);
        this.viewOptions.dateFormat = Object.assign({}, defaultConfig.dateFormat, this.config.dateFormat, this.viewOptions.dateFormat);
        this.createView();
        this.setupGroups();
        this.setupItems();
        this.computeRefs();
        this.setupBaselineItems();
        this.computeItemsRefs(...this.baselineItems);
        this.initSelectionModel();
        this.firstChange = false;
        // Note: the zone may be nooped through `BootstrapOptions` when bootstrapping the root module. This means
        // the `onStable` will never emit any value.
        const onStable$ = this.ngZone.isStable ? from(Promise.resolve()) : this.ngZone.onStable.pipe(take(1));
        // Normally this isn't in the zone, but it can cause performance regressions for apps
        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.
        this.ngZone.runOutsideAngular(() => {
            onStable$.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
                this.element.style.opacity = '1';
                this.dragContainer.dragStarted.pipe(takeUntil(this.unsubscribe$)).subscribe((event) => {
                    this.dragStarted.emit(event);
                });
                this.dragContainer.dragMoved.pipe(takeUntil(this.unsubscribe$)).subscribe((event) => {
                    this.dragMoved.emit(event);
                });
                this.dragContainer.dragEnded.pipe(takeUntil(this.unsubscribe$)).subscribe((event) => {
                    this.dragEnded.emit(event);
                    this.computeRefs();
                    this.detectChanges();
                });
            });
        });
        this.view.start$.pipe(skip(1), takeUntil(this.unsubscribe$)).subscribe(() => {
            this.computeRefs();
        });
    }
    ngOnChanges(changes) {
        if (!this.firstChange) {
            if (changes.viewType && changes.viewType.currentValue) {
                this.createView();
                this.setupGroups();
                this.setupItems();
                this.computeRefs();
                this.setupBaselineItems();
                this.computeItemsRefs(...this.baselineItems);
                this.viewChange.emit(this.view);
            }
            if (changes.originItems || changes.originGroups) {
                this.setupExpandedState();
                this.setupGroups();
                this.setupItems();
                this.computeRefs();
            }
            if (changes.originBaselineItems) {
                this.setupBaselineItems();
                this.computeItemsRefs(...this.baselineItems);
            }
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    computeItemsRefs(...items) {
        items.forEach((item) => {
            item.updateRefs({
                width: item.start && item.end ? this.view.getDateRangeWidth(item.start.startOfDay(), item.end.endOfDay()) : 0,
                x: item.start ? this.view.getXPointByDate(item.start) : 0,
                y: (this.styles.lineHeight - this.styles.barHeight) / 2 - 1
            });
        });
    }
    trackBy(index, item) {
        return item.id || index;
    }
    detectChanges() {
        this.cdr.detectChanges();
    }
    expandGroup(group) {
        group.setExpand(!group.expanded);
        this.expandChange.emit();
        this.cdr.detectChanges();
    }
    // public functions
    expandAll() {
        this.expandGroups(true);
    }
    collapseAll() {
        this.expandGroups(false);
    }
    getGanttItem(id) {
        return this.getGanttItems([id])[0] || null;
    }
    getGanttItems(ids) {
        let items = [];
        if (this.items.length > 0) {
            items = recursiveItems(this.items);
        }
        else {
            items = flatten(this.groups.map((group) => recursiveItems(group.items)));
        }
        return items.filter((item) => ids.includes(item.id));
    }
    isSelected(id) {
        if (!this.selectable) {
            return false;
        }
        if (!this.selectionModel.hasValue()) {
            return false;
        }
        return this.selectionModel.isSelected(id);
    }
}
GanttUpper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttUpper, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: GANTT_GLOBAL_CONFIG }], target: i0.ɵɵFactoryTarget.Directive });
GanttUpper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.9", type: GanttUpper, inputs: { originItems: ["items", "originItems"], originGroups: ["groups", "originGroups"], originBaselineItems: ["baselineItems", "originBaselineItems"], viewType: "viewType", start: "start", end: "end", showTodayLine: "showTodayLine", draggable: "draggable", styles: "styles", viewOptions: "viewOptions", linkOptions: "linkOptions", disabledLoadOnScroll: "disabledLoadOnScroll", selectable: "selectable", multiple: "multiple" }, outputs: { loadOnScroll: "loadOnScroll", dragStarted: "dragStarted", dragMoved: "dragMoved", dragEnded: "dragEnded", barClick: "barClick" }, host: { properties: { "class.gantt": "this.ganttClass" } }, queries: [{ propertyName: "barTemplate", first: true, predicate: ["bar"], descendants: true, static: true }, { propertyName: "rangeTemplate", first: true, predicate: ["range"], descendants: true, static: true }, { propertyName: "itemTemplate", first: true, predicate: ["item"], descendants: true, static: true }, { propertyName: "groupTemplate", first: true, predicate: ["group"], descendants: true, static: true }, { propertyName: "groupHeaderTemplate", first: true, predicate: ["groupHeader"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttUpper, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [GANTT_GLOBAL_CONFIG]
                }] }]; }, propDecorators: { originItems: [{
                type: Input,
                args: ['items']
            }], originGroups: [{
                type: Input,
                args: ['groups']
            }], originBaselineItems: [{
                type: Input,
                args: ['baselineItems']
            }], viewType: [{
                type: Input
            }], start: [{
                type: Input
            }], end: [{
                type: Input
            }], showTodayLine: [{
                type: Input
            }], draggable: [{
                type: Input
            }], styles: [{
                type: Input
            }], viewOptions: [{
                type: Input
            }], linkOptions: [{
                type: Input
            }], disabledLoadOnScroll: [{
                type: Input
            }], selectable: [{
                type: Input
            }], multiple: [{
                type: Input
            }], loadOnScroll: [{
                type: Output
            }], dragStarted: [{
                type: Output
            }], dragMoved: [{
                type: Output
            }], dragEnded: [{
                type: Output
            }], barClick: [{
                type: Output
            }], barTemplate: [{
                type: ContentChild,
                args: ['bar', { static: true }]
            }], rangeTemplate: [{
                type: ContentChild,
                args: ['range', { static: true }]
            }], itemTemplate: [{
                type: ContentChild,
                args: ['item', { static: true }]
            }], groupTemplate: [{
                type: ContentChild,
                args: ['group', { static: true }]
            }], groupHeaderTemplate: [{
                type: ContentChild,
                args: ['groupHeader', { static: true }]
            }], ganttClass: [{
                type: HostBinding,
                args: ['class.gantt']
            }] } });
export const GANTT_UPPER_TOKEN = new InjectionToken('GANTT_UPPER_TOKEN');
//# sourceMappingURL=data:application/json;base64,