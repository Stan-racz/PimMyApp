import { Injectable, EventEmitter, Inject } from '@angular/core';
import { GanttLinkType } from './class';
import { GANTT_UPPER_TOKEN } from './gantt-upper';
import * as i0 from "@angular/core";
import * as i1 from "./gantt-upper";
function getDependencyType(path, dependencyTypes) {
    if (dependencyTypes.includes(GanttLinkType.ss) && path.from.pos === InBarPosition.start && path.to.pos === InBarPosition.start) {
        return GanttLinkType.ss;
    }
    if (dependencyTypes.includes(GanttLinkType.ff) && path.from.pos === InBarPosition.finish && path.to.pos === InBarPosition.finish) {
        return GanttLinkType.ff;
    }
    if (dependencyTypes.includes(GanttLinkType.sf) && path.from.pos === InBarPosition.start && path.to.pos === InBarPosition.finish) {
        return GanttLinkType.sf;
    }
    return GanttLinkType.fs;
}
export var InBarPosition;
(function (InBarPosition) {
    InBarPosition["start"] = "start";
    InBarPosition["finish"] = "finish";
})(InBarPosition || (InBarPosition = {}));
export class GanttDragContainer {
    constructor(ganttUpper) {
        this.ganttUpper = ganttUpper;
        this.dragStarted = new EventEmitter();
        this.dragMoved = new EventEmitter();
        this.dragEnded = new EventEmitter();
        this.linkDragStarted = new EventEmitter();
        this.linkDragEntered = new EventEmitter();
        this.linkDragEnded = new EventEmitter();
        this.linkDragPath = { from: null, to: null };
    }
    emitLinkDragStarted(from) {
        this.linkDraggingId = from.item.id;
        this.linkDragPath.from = from;
        this.linkDragStarted.emit({
            source: from.item.origin,
            target: null
        });
    }
    emitLinkDragEntered(to) {
        this.linkDragPath.to = to;
        this.linkDragEntered.emit({
            source: this.linkDragPath.from.item.origin,
            target: to.item.origin
        });
    }
    emitLinkDragLeaved() {
        this.linkDragPath.to = null;
    }
    emitLinkDragEnded(to) {
        if (to) {
            this.linkDragPath.to = to;
            const dependencyType = getDependencyType(this.linkDragPath, this.ganttUpper.linkOptions?.dependencyTypes);
            this.linkDragPath.from.item.addLink({
                link: this.linkDragPath.to.item.id,
                type: dependencyType
            });
            this.linkDragEnded.emit({
                source: this.linkDragPath.from.item.origin,
                target: this.linkDragPath.to.item.origin,
                type: dependencyType
            });
        }
        this.linkDraggingId = null;
        this.linkDragPath = { from: null, to: null };
    }
}
GanttDragContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttDragContainer, deps: [{ token: GANTT_UPPER_TOKEN }], target: i0.ɵɵFactoryTarget.Injectable });
GanttDragContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttDragContainer });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttDragContainer, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.GanttUpper, decorators: [{
                    type: Inject,
                    args: [GANTT_UPPER_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FudHQtZHJhZy1jb250YWluZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wYWNrYWdlcy9nYW50dC9zcmMvZ2FudHQtZHJhZy1jb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHeEMsT0FBTyxFQUFjLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFFOUQsU0FBUyxpQkFBaUIsQ0FBQyxJQUFrQixFQUFFLGVBQWdDO0lBQzNFLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssYUFBYSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxhQUFhLENBQUMsS0FBSyxFQUFFO1FBQzVILE9BQU8sYUFBYSxDQUFDLEVBQUUsQ0FBQztLQUMzQjtJQUNELElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssYUFBYSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxhQUFhLENBQUMsTUFBTSxFQUFFO1FBQzlILE9BQU8sYUFBYSxDQUFDLEVBQUUsQ0FBQztLQUMzQjtJQUNELElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssYUFBYSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxhQUFhLENBQUMsTUFBTSxFQUFFO1FBQzdILE9BQU8sYUFBYSxDQUFDLEVB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MkZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVTs7MEJBa0JNLE1BQU07MkJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdhbnR0TGlua1R5cGUgfSBmcm9tICcuL2NsYXNzJztcbmltcG9ydCB7IEdhbnR0RHJhZ0V2ZW50LCBHYW50dExpbmtEcmFnRXZlbnQgfSBmcm9tICcuL2NsYXNzL2V2ZW50JztcbmltcG9ydCB7IEdhbnR0SXRlbUludGVybmFsIH0gZnJvbSAnLi9jbGFzcy9pdGVtJztcbmltcG9ydCB7IEdhbnR0VXBwZXIsIEdBTlRUX1VQUEVSX1RPS0VOIH0gZnJvbSAnLi9nYW50dC11cHBlcic7XG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY3lUeXBlKHBhdGg6IExpbmtEcmFnUGF0aCwgZGVwZW5kZW5jeVR5cGVzOiBHYW50dExpbmtUeXBlW10pOiBHYW50dExpbmtUeXBlIHtcbiAgICBpZiAoZGVwZW5kZW5jeVR5cGVzLmluY2x1ZGVzKEdhbnR0TGlua1R5cGUuc3MpICYmIHBhdGguZnJvbS5wb3MgPT09IEluQmFyUG9zaXRpb24uc3RhcnQgJiYgcGF0aC50by5wb3MgPT09IEluQmFyUG9zaXRpb24uc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIEdhbnR0TGlua1R5cGUuc3M7XG4gICAgfVxuICAgIGlmIChkZXBlbmRlbmN5VHlwZXMuaW5jbHVkZXMoR2FudHRMaW5rVHlwZS5mZikgJiYgcGF0aC5mcm9tLnBvcyA9PT0gSW5CYXJQb3NpdGlvbi5maW5pc2ggJiYgcGF0aC50by5wb3MgPT09IEluQmFyUG9zaXRpb24uZmluaXNoKSB7XG4gICAgICAgIHJldHVybiBHYW50dExpbmtUeXBlLmZmO1xuICAgIH1cbiAgICBpZiAoZGVwZW5kZW5jeVR5cGVzLmluY2x1ZGVzKEdhbnR0TGlua1R5cGUuc2YpICYmIHBhdGguZnJvbS5wb3MgPT09IEluQmFyUG9zaXRpb24uc3RhcnQgJiYgcGF0aC50by5wb3MgPT09IEluQmFyUG9zaXRpb24uZmluaXNoKSB7XG4gICAgICAgIHJldHVybiBHYW50dExpbmtUeXBlLnNmO1xuICAgIH1cbiAgICByZXR1cm4gR2FudHRMaW5rVHlwZS5mcztcbn1cblxuZXhwb3J0IGVudW0gSW5CYXJQb3NpdGlvbiB7XG4gICAgc3RhcnQgPSAnc3RhcnQnLFxuICAgIGZpbmlzaCA9ICdmaW5pc2gnXG59XG5cbmV4cG9ydCB0eXBlIExpbmtEcmFnUG9zaXRpb24gPSB7XG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgaXRlbTogR2FudHRJdGVtSW50ZXJuYWw7XG4gICAgcG9zPzogSW5CYXJQb3NpdGlvbjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua0RyYWdQYXRoIHtcbiAgICBmcm9tPzogTGlua0RyYWdQb3NpdGlvbjtcbiAgICB0bz86IExpbmtEcmFnUG9zaXRpb247XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHYW50dERyYWdDb250YWluZXIge1xuICAgIGRyYWdTdGFydGVkID0gbmV3IEV2ZW50RW1pdHRlcjxHYW50dERyYWdFdmVudD4oKTtcblxuICAgIGRyYWdNb3ZlZCA9IG5ldyBFdmVudEVtaXR0ZXI8R2FudHREcmFnRXZlbnQ+KCk7XG5cbiAgICBkcmFnRW5kZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbnR0RHJhZ0V2ZW50PigpO1xuXG4gICAgbGlua0RyYWdTdGFydGVkID0gbmV3IEV2ZW50RW1pdHRlcjxHYW50dExpbmtEcmFnRXZlbnQ+KCk7XG5cbiAgICBsaW5rRHJhZ0VudGVyZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbnR0TGlua0RyYWdFdmVudD4oKTtcblxuICAgIGxpbmtEcmFnRW5kZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbnR0TGlua0RyYWdFdmVudD4oKTtcblxuICAgIGxpbmtEcmFnZ2luZ0lkOiBzdHJpbmc7XG5cbiAgICBsaW5rRHJhZ1BhdGg6IExpbmtEcmFnUGF0aCA9IHsgZnJvbTogbnVsbCwgdG86IG51bGwgfTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoR0FOVFRfVVBQRVJfVE9LRU4pIHB1YmxpYyBnYW50dFVwcGVyOiBHYW50dFVwcGVyKSB7fVxuXG4gICAgZW1pdExpbmtEcmFnU3RhcnRlZChmcm9tOiBMaW5rRHJhZ1Bvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMubGlua0RyYWdnaW5nSWQgPSBmcm9tLml0ZW0uaWQ7XG4gICAgICAgIHRoaXMubGlua0RyYWdQYXRoLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLmxpbmtEcmFnU3RhcnRlZC5lbWl0KHtcbiAgICAgICAgICAgIHNvdXJjZTogZnJvbS5pdGVtLm9yaWdpbixcbiAgICAgICAgICAgIHRhcmdldDogbnVsbFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBlbWl0TGlua0RyYWdFbnRlcmVkKHRvOiBMaW5rRHJhZ1Bvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMubGlua0RyYWdQYXRoLnRvID0gdG87XG4gICAgICAgIHRoaXMubGlua0RyYWdFbnRlcmVkLmVtaXQoe1xuICAgICAgICAgICAgc291cmNlOiB0aGlzLmxpbmtEcmFnUGF0aC5mcm9tLml0ZW0ub3JpZ2luLFxuICAgICAgICAgICAgdGFyZ2V0OiB0by5pdGVtLm9yaWdpblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBlbWl0TGlua0RyYWdMZWF2ZWQoKSB7XG4gICAgICAgIHRoaXMubGlua0RyYWdQYXRoLnRvID0gbnVsbDtcbiAgICB9XG5cbiAgICBlbWl0TGlua0RyYWdFbmRlZCh0bz86IExpbmtEcmFnUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHRvKSB7XG4gICAgICAgICAgICB0aGlzLmxpbmtEcmFnUGF0aC50byA9IHRvO1xuICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jeVR5cGUgPSBnZXREZXBlbmRlbmN5VHlwZSh0aGlzLmxpbmtEcmFnUGF0aCwgdGhpcy5nYW50dFVwcGVyLmxpbmtPcHRpb25zPy5kZXBlbmRlbmN5VHlwZXMpO1xuICAgICAgICAgICAgdGhpcy5saW5rRHJhZ1BhdGguZnJvbS5pdGVtLmFkZExpbmsoe1xuICAgICAgICAgICAgICAgIGxpbms6IHRoaXMubGlua0RyYWdQYXRoLnRvLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgdHlwZTogZGVwZW5kZW5jeVR5cGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5saW5rRHJhZ0VuZGVkLmVtaXQoe1xuICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5saW5rRHJhZ1BhdGguZnJvbS5pdGVtLm9yaWdpbixcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMubGlua0RyYWdQYXRoLnRvLml0ZW0ub3JpZ2luLFxuICAgICAgICAgICAgICAgIHR5cGU6IGRlcGVuZGVuY3lUeXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGlua0RyYWdnaW5nSWQgPSBudWxsO1xuICAgICAgICB0aGlzLmxpbmtEcmFnUGF0aCA9IHsgZnJvbTogbnVsbCwgdG86IG51bGwgfTtcbiAgICB9XG59XG4iXX0=