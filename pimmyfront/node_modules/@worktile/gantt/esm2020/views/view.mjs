import { GanttDate, differenceInDays } from '../utils/date';
import { BehaviorSubject } from 'rxjs';
import { defaultConfig } from '../gantt.config';
export const primaryDatePointTop = 18;
export const secondaryDatePointTop = 36;
const viewOptions = {
    min: new GanttDate().addYears(-1).startOfYear(),
    max: new GanttDate().addYears(1).endOfYear(),
    dateFormat: defaultConfig.dateFormat
};
export class GanttView {
    constructor(start, end, options) {
        this.showTimeline = true;
        this.options = Object.assign({}, viewOptions, options);
        const startDate = start.isCustom
            ? this.startOf(start.date)
            : this.startOf(start.date.value < this.options.start.value ? start.date : this.options.start);
        const endDate = end.isCustom
            ? this.endOf(end.date)
            : this.endOf(end.date.value > this.options.end.value ? end.date : this.options.end);
        this.start$ = new BehaviorSubject(startDate);
        this.end$ = new BehaviorSubject(endDate);
        this.initialize();
    }
    get start() {
        return this.start$.getValue();
    }
    get end() {
        return this.end$.getValue();
    }
    getDateIntervalWidth(start, end) {
        let result = 0;
        const days = differenceInDays(end.value, start.value);
        for (let i = 0; i < Math.abs(days); i++) {
            result += this.getDayOccupancyWidth(start.addDays(i));
        }
        result = days >= 0 ? result : -result;
        return Number(result.toFixed(3));
    }
    initialize() {
        this.primaryDatePoints = this.getPrimaryDatePoints();
        this.secondaryDatePoints = this.getSecondaryDatePoints();
        this.width = this.getWidth();
        this.cellWidth = this.getCellWidth();
        this.primaryWidth = this.getPrimaryWidth();
    }
    addStartDate() {
        const start = this.startOf(this.start.add(this.options.addAmount * -1, this.options.addUnit));
        if (start.value >= this.options.min.value) {
            const origin = this.start;
            this.start$.next(start);
            this.initialize();
            return { start: this.start, end: origin };
        }
        return null;
    }
    addEndDate() {
        const end = this.endOf(this.end.add(this.options.addAmount, this.options.addUnit));
        if (end.value <= this.options.max.value) {
            const origin = this.end;
            this.end$.next(end);
            this.initialize();
            return { start: origin, end: this.end };
        }
        return null;
    }
    updateDate(start, end) {
        start = this.startOf(start);
        end = this.endOf(end);
        if (start.value < this.start.value) {
            this.start$.next(start);
        }
        if (end.value > this.end.value) {
            this.end$.next(end);
        }
        this.initialize();
    }
    // 获取View的宽度
    getWidth() {
        return this.getCellWidth() * this.secondaryDatePoints.length;
    }
    // 获取单个网格的宽度
    getCellWidth() {
        return this.options.cellWidth;
    }
    // 获取当前时间的X坐标
    getTodayXPoint() {
        const toady = new GanttDate().startOfDay();
        if (toady.value > this.start.value && toady.value < this.end.value) {
            const x = this.getXPointByDate(toady) + this.getDayOccupancyWidth(toady) / 2;
            return x;
        }
        else {
            return null;
        }
    }
    // 获取指定时间的X坐标
    getXPointByDate(date) {
        return this.getDateIntervalWidth(this.start, date);
    }
    // 根据X坐标获取对应时间
    getDateByXPoint(x) {
        const indexOfSecondaryDate = Math.floor(x / this.getCellWidth());
        const matchDate = this.secondaryDatePoints[indexOfSecondaryDate];
        const dayWidth = this.getDayOccupancyWidth(matchDate?.start);
        if (dayWidth === this.getCellWidth()) {
            return matchDate?.start;
        }
        else {
            const day = Math.floor((x % this.getCellWidth()) / dayWidth) + 1;
            if (this.getCellWidth() / dayWidth === 7) {
                return matchDate?.start.addDays(day);
            }
            return matchDate?.start.setDate(day);
        }
    }
    // 获取指定时间范围的宽度
    getDateRangeWidth(start, end) {
        // addSeconds(1) 是因为计算相差天会以一个整天来计算 end时间一般是59分59秒不是一个整天，所以需要加1
        return this.getDateIntervalWidth(start, end.addSeconds(1));
    }
}
//# sourceMappingURL=data:application/json;base64,