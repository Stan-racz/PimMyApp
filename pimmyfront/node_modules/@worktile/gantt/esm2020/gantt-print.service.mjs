import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class GanttPrintService {
    constructor() { }
    setInlineStyles(targetElem) {
        const svgElements = Array.from(targetElem.getElementsByTagName('svg'));
        for (const svgElement of svgElements) {
            this.recursElementChildren(svgElement);
        }
    }
    recursElementChildren(node) {
        const transformProperties = [
            'fill',
            'color',
            'font-size',
            'stroke',
            'font',
            'text-anchor',
            'stroke-dasharray',
            'shape-rendering',
            'stroke-width'
        ];
        if (!node.style) {
            return;
        }
        const styles = getComputedStyle(node);
        for (const transformProperty of transformProperties) {
            node.style[transformProperty] = styles[transformProperty];
        }
        for (const child of Array.from(node.childNodes)) {
            this.recursElementChildren(child);
        }
    }
    register(root) {
        this.root = root.nativeElement;
        this.mainContainer = this.root.getElementsByClassName('gantt-main-container')[0];
    }
    async print(name = 'download', ignoreElementClass) {
        const root = this.root;
        const mainContainer = this.mainContainer;
        // set print width
        const printWidth = root.offsetWidth;
        // set print height
        const printHeight = root.offsetHeight - mainContainer.offsetHeight + mainContainer.scrollHeight;
        const html2canvas = (await import(/* webpackChunkName: 'html2canvas' */ 'html2canvas')).default;
        html2canvas(root, {
            logging: false,
            allowTaint: true,
            useCORS: true,
            width: printWidth,
            height: printHeight,
            ignoreElements: (element) => {
                if (ignoreElementClass && element.classList.contains(ignoreElementClass)) {
                    return true;
                }
                if (element.classList.contains('gantt-calendar-today-overlay')) {
                    return true;
                }
            },
            onclone: (cloneDocument) => {
                const ganttClass = root.className;
                const cloneGanttDom = cloneDocument.querySelector(`.${ganttClass.replace(/\s+/g, '.')}`);
                const cloneGanttContainerDom = cloneDocument.querySelector('.gantt-container');
                const cloneCalendarOverlay = cloneDocument.querySelector('.gantt-calendar-overlay-main');
                const cloneLinksOverlay = cloneDocument.querySelector('.gantt-links-overlay-main');
                // change targetDom width
                cloneGanttDom.style.width = `${printWidth}px`;
                cloneGanttDom.style.height = `${printHeight}px`;
                cloneGanttDom.style.overflow = `unset`;
                cloneGanttContainerDom.style.backgroundColor = '#fff';
                cloneCalendarOverlay.setAttribute('height', `${printHeight}`);
                cloneCalendarOverlay.setAttribute('style', `background: transparent`);
                if (cloneLinksOverlay) {
                    cloneLinksOverlay.setAttribute('height', `${printHeight}`);
                    cloneLinksOverlay.setAttribute('style', `height: ${printHeight}px`);
                }
                // setInlineStyles for svg
                this.setInlineStyles(cloneGanttDom);
            }
        }).then((canvas) => {
            const link = document.createElement('a');
            const dataUrl = canvas.toDataURL('image/png');
            link.download = `${name}.png`;
            link.href = dataUrl;
            link.click();
        });
    }
}
GanttPrintService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttPrintService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
GanttPrintService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttPrintService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: GanttPrintService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,