import { GanttDate } from '../utils/date';
import { BehaviorSubject } from 'rxjs';
import { GanttViewType } from './view-type';
import { GanttLinkType } from './link';
export var GanttItemType;
(function (GanttItemType) {
    GanttItemType["bar"] = "bar";
    GanttItemType["range"] = "range";
    GanttItemType["custom"] = "custom";
})(GanttItemType || (GanttItemType = {}));
export class GanttItemInternal {
    constructor(item, options) {
        this.refs$ = new BehaviorSubject(null);
        this.origin = item;
        this.id = this.origin.id;
        this.links = (this.origin.links || []).map((link) => {
            if (typeof link === 'string') {
                return {
                    type: GanttLinkType.fs,
                    link
                };
            }
            else {
                return link;
            }
        });
        this.color = this.origin.color;
        this.barStyle = this.origin.barStyle;
        this.linkable = this.origin.linkable === undefined ? true : this.origin.linkable;
        this.draggable = this.origin.draggable === undefined ? true : this.origin.draggable;
        this.expandable = this.origin.expandable || (this.origin.children || []).length > 0;
        this.expanded = this.origin.expanded === undefined ? false : this.origin.expanded;
        this.start = item.start ? new GanttDate(item.start) : null;
        this.end = item.end ? new GanttDate(item.end) : null;
        this.viewType = options && options.viewType ? options.viewType : GanttViewType.month;
        this.children = (item.children || []).map((subItem) => {
            return new GanttItemInternal(subItem, { viewType: this.viewType });
        });
        this.type = this.origin.type || GanttItemType.bar;
        this.progress = this.origin.progress;
        // fill one month when start or end is null
        this.fillItemStartOrEnd(item);
    }
    get refs() {
        return this.refs$.getValue();
    }
    fillItemStartOrEnd(item) {
        let addInterval;
        switch (this.viewType) {
            case GanttViewType.day:
            case GanttViewType.week:
                addInterval = 0;
                break;
            default:
                addInterval = 30;
                break;
        }
        if (item.start && !item.end) {
            this.end = new GanttDate(item.start).addDays(addInterval).endOfDay();
        }
        if (!item.start && item.end) {
            this.start = new GanttDate(item.end).addDays(-addInterval).startOfDay();
        }
    }
    updateRefs(refs) {
        this.refs$.next(refs);
    }
    updateDate(start, end) {
        this.start = start.startOfDay();
        this.end = end.endOfDay();
        this.origin.start = this.start.getUnixTime();
        this.origin.end = this.end.getUnixTime();
    }
    addChildren(items) {
        this.origin.children = items;
        this.children = (items || []).map((subItem) => {
            return new GanttItemInternal(subItem, { viewType: this.viewType });
        });
    }
    setExpand(expanded) {
        this.expanded = expanded;
        this.origin.expanded = expanded;
    }
    addLink(link) {
        console.log(link);
        this.links = [...this.links, link];
        this.origin.links = this.links;
    }
}
//# sourceMappingURL=data:application/json;base64,