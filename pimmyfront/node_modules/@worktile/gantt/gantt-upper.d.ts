import { TemplateRef, EventEmitter, ElementRef, ChangeDetectorRef, NgZone, SimpleChanges, InjectionToken, OnInit, OnDestroy, OnChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { GanttItem, GanttGroup, GanttViewType, GanttLoadOnScrollEvent, GanttDragEvent, GanttGroupInternal, GanttItemInternal, GanttBarClickEvent, GanttLinkDragEvent } from './class';
import { GanttView, GanttViewOptions } from './views/view';
import { GanttStyles } from './gantt.styles';
import { Dictionary } from './utils/helpers';
import { GanttDragContainer } from './gantt-drag-container';
import { GanttGlobalConfig } from './gantt.config';
import { GanttLinkOptions } from './class/link';
import { SelectionModel } from '@angular/cdk/collections';
import { BooleanInput } from '@angular/cdk/coercion';
import { GanttBaselineItem, GanttBaselineItemInternal } from './class/baseline';
import * as i0 from "@angular/core";
export declare abstract class GanttUpper implements OnChanges, OnInit, OnDestroy {
    protected elementRef: ElementRef<HTMLElement>;
    protected cdr: ChangeDetectorRef;
    protected ngZone: NgZone;
    config: GanttGlobalConfig;
    originItems: GanttItem[];
    originGroups: GanttGroup[];
    originBaselineItems: GanttBaselineItem[];
    viewType: GanttViewType;
    start: number;
    end: number;
    showTodayLine: boolean;
    draggable: boolean;
    styles: GanttStyles;
    viewOptions: GanttViewOptions;
    set linkOptions(options: GanttLinkOptions);
    get linkOptions(): GanttLinkOptions;
    disabledLoadOnScroll: boolean;
    set selectable(value: BooleanInput);
    get selectable(): boolean;
    set multiple(value: BooleanInput);
    get multiple(): boolean;
    loadOnScroll: EventEmitter<GanttLoadOnScrollEvent>;
    dragStarted: EventEmitter<GanttDragEvent<unknown>>;
    dragMoved: EventEmitter<GanttDragEvent<unknown>>;
    dragEnded: EventEmitter<GanttDragEvent<unknown>>;
    barClick: EventEmitter<GanttBarClickEvent<unknown>>;
    barTemplate: TemplateRef<any>;
    rangeTemplate: TemplateRef<any>;
    itemTemplate: TemplateRef<any>;
    groupTemplate: TemplateRef<any>;
    groupHeaderTemplate: TemplateRef<any>;
    linkable: boolean;
    linkDragEnded: EventEmitter<GanttLinkDragEvent<unknown>>;
    view: GanttView;
    items: GanttItemInternal[];
    groups: GanttGroupInternal[];
    baselineItems: GanttBaselineItemInternal[];
    baselineItemsMap: Dictionary<GanttBaselineItemInternal>;
    viewChange: EventEmitter<GanttView>;
    expandChange: EventEmitter<void>;
    get element(): HTMLElement;
    firstChange: boolean;
    dragContainer: GanttDragContainer;
    unsubscribe$: Subject<void>;
    selectionModel: SelectionModel<string>;
    private groupsMap;
    private _selectable;
    private _multiple;
    private _linkOptions;
    ganttClass: boolean;
    constructor(elementRef: ElementRef<HTMLElement>, cdr: ChangeDetectorRef, ngZone: NgZone, config: GanttGlobalConfig);
    private createView;
    private setupGroups;
    private setupItems;
    private setupBaselineItems;
    private setupExpandedState;
    private getViewDate;
    computeRefs(): void;
    private expandGroups;
    private initSelectionModel;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    computeItemsRefs(...items: GanttItemInternal[] | GanttBaselineItemInternal[]): void;
    trackBy(index: number, item: GanttGroupInternal | GanttItemInternal): string | number;
    detectChanges(): void;
    expandGroup(group: GanttGroupInternal): void;
    expandAll(): void;
    collapseAll(): void;
    getGanttItem(id: string): GanttItemInternal;
    getGanttItems(ids: string[]): GanttItemInternal[];
    isSelected(id: string): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<GanttUpper, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<GanttUpper, never, never, { "originItems": "items"; "originGroups": "groups"; "originBaselineItems": "baselineItems"; "viewType": "viewType"; "start": "start"; "end": "end"; "showTodayLine": "showTodayLine"; "draggable": "draggable"; "styles": "styles"; "viewOptions": "viewOptions"; "linkOptions": "linkOptions"; "disabledLoadOnScroll": "disabledLoadOnScroll"; "selectable": "selectable"; "multiple": "multiple"; }, { "loadOnScroll": "loadOnScroll"; "dragStarted": "dragStarted"; "dragMoved": "dragMoved"; "dragEnded": "dragEnded"; "barClick": "barClick"; }, ["barTemplate", "rangeTemplate", "itemTemplate", "groupTemplate", "groupHeaderTemplate"]>;
}
export declare const GANTT_UPPER_TOKEN: InjectionToken<GanttUpper>;
