{"version":3,"file":"schedule-timeline-base.d.ts","sources":["schedule-timeline-base.d.ts"],"names":[],"mappingssourcesContent":["import { BaseComponent, IBaseProps } from '../../../base';\nimport { DateType, ITimezonePlugin } from '../../../util/datetime';\nimport { MbscCalendarEvent, MbscCalendarEventData, MbscResource } from '../eventcalendar';\nimport { MbscNewEventData, MbscSlot } from '../eventcalendar.types';\nexport declare const DEF_ID = \"mbsc-def\";\nexport interface ISTOptions extends IBaseProps {\n    allDayText?: string;\n    amText?: string;\n    clickToCreate?: boolean | 'single' | 'double';\n    colorsMap?: {\n        [key: number]: MbscCalendarEvent[];\n    };\n    dayNames?: string[];\n    dayNamesMin?: string[];\n    dayNamesShort?: string[];\n    dataTimezone?: string;\n    dateFormat?: string;\n    dateFormatLong?: string;\n    displayTimezone?: string;\n    dragTimeStep?: number;\n    dragToCreate?: boolean;\n    dragToMove?: boolean;\n    dragToResize?: boolean;\n    endDay: number;\n    endTime?: string;\n    eventMap?: {\n        [key: string]: MbscCalendarEvent[];\n    };\n    eventOrder?: (event1: MbscCalendarEvent, event2: MbscCalendarEvent) => number;\n    exclusiveEndDates?: boolean;\n    extendDefaultEvent?: (args: MbscNewEventData) => MbscCalendarEvent;\n    externalDrop?: boolean;\n    firstDay?: number;\n    getDay?: (d: Date) => number;\n    getDate?: (y: number, m: number, d: number, h?: number, i?: number, s?: number, u?: number) => Date;\n    getMonth?: (d: Date) => number;\n    getWeekNumber?: (d: Date) => number;\n    getYear?: (d: Date) => number;\n    groupBy?: 'date' | 'resource';\n    height?: number;\n    invalidateEvent?: 'start-end' | 'strict';\n    invalidsMap?: {\n        [key: number]: MbscCalendarEvent[];\n    };\n    eventList?: boolean;\n    maxDate: number;\n    minDate: number;\n    monthNames?: string[];\n    monthNamesShort?: string[];\n    nextIcon?: string;\n    nextIconRtl?: string;\n    downIcon?: string;\n    newEventText?: string;\n    pmText?: string;\n    refDate?: DateType;\n    resources?: MbscResource[] | null | undefined;\n    rowHeight?: 'variable' | 'equal';\n    scroll: number;\n    selected: number;\n    selectedEventsMap: {\n        [key: number]: MbscCalendarEvent;\n    };\n    showAllDay?: boolean;\n    showDays?: boolean;\n    showEventTooltip?: boolean;\n    weekNumbers?: boolean;\n    size?: number;\n    slots?: MbscSlot[] | null | undefined;\n    startDay: number;\n    startTime?: string;\n    timeCellStep: number;\n    timeFormat?: string;\n    timeLabelStep: number;\n    timezonePlugin?: ITimezonePlugin;\n    type: 'week' | 'day' | 'month' | 'year';\n    weekText?: string;\n    width?: number;\n    eventDragEnd(args: any): boolean;\n    onCellClick(args: any): void;\n    onCellDoubleClick(args: any): void;\n    onCellRightClick(args: any): void;\n    onEventClick(args: any): void;\n    onEventDoubleClick(args: any): void;\n    onEventRightClick(args: any): void;\n    onEventDelete(args: any): void;\n    onEventHoverIn(args: any): void;\n    onEventHoverOut(args: any): void;\n    onEventDragEnd?(args: any, inst: any): void;\n    onEventDragStart?(args: any, inst: any): void;\n    renderEventContent?(event: MbscCalendarEventData): any;\n    renderEvent?(event: MbscCalendarEventData): any;\n    renderResource?(resource: MbscResource): any;\n    renderResourceHeader?(): any;\n}\nexport interface ISTState {\n    batchIndexX?: number;\n    batchIndexY?: number;\n    cellHeight?: number;\n    cellWidth?: number;\n    dayNameWidth?: number;\n    dayWidth?: number;\n    dragData?: IDragData;\n    eventHeight?: number;\n    hasScrollX?: boolean;\n    hasScrollY?: boolean;\n    headerHeight?: number;\n    isTouchDrag?: boolean;\n    rowHeight?: number;\n    scrollContHeight?: number;\n}\nexport interface IDailyColors {\n    allDay?: MbscCalendarEventData;\n    colors: MbscCalendarEventData[];\n}\nexport interface IDailyEvents {\n    allDay: MbscCalendarEventData[];\n    events: MbscCalendarEventData[];\n}\nexport interface IDailyInvalids {\n    allDay?: MbscCalendarEventData;\n    invalids: MbscCalendarEventData[];\n}\nexport interface IEventPosData {\n    cssClass?: string;\n    start?: string;\n    startDate: Date;\n    end?: string;\n    endDate: Date;\n    position?: {\n        height?: string;\n        left?: string;\n        right?: string;\n        top?: string;\n        width?: string;\n    };\n}\nexport interface IDragData {\n    /**\n     * The dates of the event which is dragged.\n     * We need to display the event boxes in case of touch drag, when we enter drag mode,\n     * and continue to display during drag, but invisible, otherwise, if we loose the\n     * element on which the touch started, the touch events will stop firing.\n     */\n    originDates?: {\n        [key: string]: MbscCalendarEventData;\n    };\n    /** The dates of the dragged event. */\n    draggedDates?: {\n        [key: string]: MbscCalendarEventData;\n    };\n    /** The dragged event, displayed during dr√üag. */\n    draggedEvent?: MbscCalendarEventData;\n    resource?: number | string;\n    slot?: number | string;\n}\ninterface IDayData {\n    date: Date;\n    dateIndex: number;\n    dateKey: string;\n    dateText: string;\n    day: number;\n    label: string;\n    lastOfMonth?: boolean;\n    lastOfWeek?: boolean;\n    monthIndex: number;\n    monthText: string;\n    monthTitle: string;\n    timestamp: number;\n    weekIndex: number;\n    weekText: string;\n    weekTitle: string;\n}\ninterface IVirtualPage {\n    top: number;\n    startIndex: number;\n}\n/** @hidden */\nexport declare function getResourceMap(eventsMap: {\n    [key: string]: MbscCalendarEvent[];\n}, resources: MbscResource[], slots: MbscSlot[], hasResources: boolean, hasSlots: boolean): {\n    [key: string]: {\n        [key: string]: {\n            [key: string]: MbscCalendarEvent[];\n        };\n    };\n};\n/** @hidden */\nexport declare function getCellDate(timestamp: number, ms: number): Date;\n/** @hidden */\nexport declare class STBase<PropType extends ISTOptions, StateType extends ISTState> extends BaseComponent<PropType, StateType> {\n    _batchEnd: Date;\n    _batchStart: Date;\n    _batchRowNr: number;\n    _colors: {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyColors;\n            };\n        };\n    };\n    /** Map containing the day index for each day; timestamp ->  dayIndex */\n    _dayIndexMap: {\n        [key: string]: number;\n    };\n    _dayNames: string[];\n    /** Array containing the days to display */\n    _days: IDayData[];\n    _daysBatch: IDayData[];\n    _daysBatchNr: number;\n    /** Number of displayed days */\n    _daysNr: number;\n    _dayWidth: number;\n    _displayTime: boolean;\n    _endCellStyle: {\n        height?: string;\n        width?: string;\n    } | undefined;\n    /** Displayed end time as milliseconds since midnight */\n    _endTime: number;\n    _eventHeight: number;\n    /** Number of event rows for a resource, used for row height calculation */\n    _eventRows: {\n        [key: number]: number;\n    };\n    _events: {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyEvents;\n            };\n        };\n    };\n    _firstDay: Date;\n    _firstDayTz: Date;\n    _gridWidth: number;\n    _groupByResource: boolean;\n    _gridHeight: number;\n    _hasHierarchy: boolean;\n    _hasSlots: boolean;\n    _hasSideSticky: boolean;\n    _hasSticky: boolean;\n    _headerClass: string;\n    _headerDays: IDayData[];\n    _invalids: {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyInvalids;\n            };\n        };\n    };\n    _isMulti: boolean;\n    _isSingleResource: boolean;\n    _isTimeline: boolean;\n    _lastDay: Date;\n    _lastDayTz: Date;\n    _placeholderSizeX: number;\n    _placeholderSizeY: number;\n    /** Contains the resources flatten out into one level */\n    _resources: MbscResource[];\n    _resourcesBatch: MbscResource[];\n    _selectedDay: number;\n    _setRowHeight: boolean;\n    _showTimeIndicator: boolean;\n    _slots: MbscSlot[];\n    _startCellStyle: {\n        height?: string;\n        width?: string;\n    } | undefined;\n    /** Displayed start time as milliseconds since midnight */\n    _startTime: number;\n    _stepCell: number;\n    _stepLabel: number;\n    /** Displayed time as milliseconds */\n    _time: number;\n    /** Array containing the hours to display */\n    _timeLabels: {\n        [key: number]: string;\n    };\n    _times: number[];\n    _timesBetween: number[];\n    protected _gridCont: HTMLElement | null;\n    protected _headerCont: HTMLElement | null;\n    protected _resCont: HTMLElement | null;\n    protected _scrollCont: HTMLElement | null;\n    protected _shouldAnimateScroll: boolean | undefined;\n    protected _shouldCheckSize: boolean;\n    protected _shouldScroll: boolean;\n    protected _visibleResources: MbscResource[];\n    protected _virtualPagesY: IVirtualPage[];\n    private _allDayTop;\n    private _colHeight;\n    private _colWidth;\n    private _gridContBottom;\n    private _gridContLeft;\n    private _gridContRight;\n    private _gridContTop;\n    private _gridLeft;\n    private _gridRight;\n    private _gridTop;\n    private _onCalendar;\n    private _resWidth;\n    private _rowStartIndex;\n    private _rowTops;\n    private _scrollTimer;\n    private _scrollX;\n    private _scrollY;\n    private _tempAllDay;\n    private _tempEnd;\n    private _tempEvent;\n    private _tempResource;\n    private _tempSlot;\n    private _tempStart;\n    private _touchTimer;\n    private _unlisten;\n    private _unsubscribe;\n    _isToday(d: number): boolean;\n    _formatTime(v: number, timezone?: string): string;\n    _onScroll: () => void;\n    _onEventDragModeOn: (args: any) => void;\n    _onEventDragModeOff: (args: any) => void;\n    _onEventDragStart: (args: any) => void;\n    _onEventDragMove: (args: any) => void;\n    _onEventDragEnd: (args: any) => void;\n    _onExternalDrag: (args: any) => void;\n    protected _getEventPos(event: MbscCalendarEventData, day: Date, dateKey: string, displayedMap: Map<MbscCalendarEvent, boolean>): IEventPosData | undefined;\n    protected _getEventData(event: MbscCalendarEvent, d: Date, resource?: MbscResource, skipLabels?: boolean): MbscCalendarEventData;\n    protected _getEvents(eventMap: {\n        [key: string]: MbscCalendarEvent[];\n    }): {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyEvents;\n            };\n        };\n    };\n    protected _getInvalids(invalidMap: {\n        [key: string]: MbscCalendarEvent[];\n    }): {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyInvalids;\n            };\n        };\n    };\n    protected _getColors(colorMap: {\n        [key: string]: MbscCalendarEvent[];\n    }): {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyColors;\n            };\n        };\n    };\n    protected _flattenResources(resources: MbscResource[] | null | undefined, flat: MbscResource[], depth: number, all?: boolean): MbscResource[];\n    protected _render(s: ISTOptions, state: ISTState): void;\n    protected _mounted(): void;\n    protected _updated(): void;\n    protected _destroy(): void;\n    private _calcGridDimensions;\n    private _getDragDates;\n    /**\n     * Returns a date with the time based on the coordinates on the grid.\n     * @param day We're on this day.\n     * @param posX X coord - for timeline.\n     * @param posY Y coord - for schedule.\n     * @param dayIndex Index of the day on the timeline.\n     * @param timeStep Time step in minutes.\n     */\n    private _getGridTime;\n    private _scrollToTime;\n}\nexport {};\n"]}