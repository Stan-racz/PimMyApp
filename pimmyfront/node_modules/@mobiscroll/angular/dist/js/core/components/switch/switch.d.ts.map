{"version":3,"file":"switch.d.ts","sources":["switch.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { BaseComponent, IBaseProps } from '../../base';\nexport interface MbscSwitchOptions extends IBaseProps {\n    checked?: boolean;\n    color?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light';\n    defaultChecked?: boolean;\n    description?: string;\n    disabled?: boolean;\n    onChange?: any;\n    inputStyle?: 'underline' | 'box' | 'outline';\n    label?: string;\n    position?: 'start' | 'end';\n}\n/** @hidden */\nexport interface MbscSwitchState {\n    checked?: boolean;\n    disabled?: boolean;\n    hasFocus?: boolean;\n    isActive?: boolean;\n    dragging?: boolean;\n}\n/** @hidden */\nexport declare class SwitchBase extends BaseComponent<MbscSwitchOptions, MbscSwitchState> {\n    static defaults: MbscSwitchOptions;\n    protected static _name: string;\n    _checked: boolean;\n    _cssClass: string;\n    _disabled: boolean;\n    _input: HTMLInputElement;\n    _handle: HTMLSpanElement;\n    _handleCont: HTMLSpanElement;\n    _handleContClass: string;\n    _handleClass: string;\n    _handleLeft: number;\n    private _unlisten;\n    private _inputUnlisten;\n    _onChange: (ev: any) => void;\n    /**\n     * The click events default behavior on labels are to also trigger a change event.\n     * We need to disable this behavior because we trigger the change events manually to be consistent.\n     *\n     * The main reason for this is that on touch devices when there is a drag, there is no click triggered,\n     * but when there's only a tap, there's also a click, so that would result in multiple change events\n     * that would cancel out each other.\n     */\n    protected _onLabelClick: (ev: any) => void;\n    protected _change(checked: boolean): void;\n    /**\n     * Sets the handle position\n     * @param left The left position of the handle element in percent\n     */\n    protected _setHandleLeft(left: number): void;\n    protected _mounted(): void;\n    protected _render(s: MbscSwitchOptions, state: MbscSwitchState): void;\n    protected _destroy(): void;\n}\n"]}