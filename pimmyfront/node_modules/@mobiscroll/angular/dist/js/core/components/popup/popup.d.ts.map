{"version":3,"file":"popup.d.ts","sources":["popup.d.ts"],"names":[],"mappingssourcesContent":["import { BaseComponent, IBaseProps } from '../../base';\nexport declare type MbscPopupPredefinedButton = 'set' | 'cancel' | 'ok' | 'close';\nexport declare type MbscPopupDisplay = 'center' | 'bottom' | 'top' | 'anchored' | 'inline' | 'bubble';\nexport interface IPopupButtonBase {\n    color?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light';\n    cssClass?: string;\n    icon?: string;\n    keyCode?: number | 'enter' | 'esc' | 'space' | Array<number | 'enter' | 'esc' | 'space'>;\n    name?: MbscPopupPredefinedButton;\n    text?: string;\n    variant?: 'standard' | 'flat' | 'outline';\n    disabled?: boolean;\n}\nexport interface MbscPopupButton extends IPopupButtonBase {\n    handler?: MbscPopupPredefinedButton | ((event: any) => void);\n}\nexport interface IPopupButton extends IPopupButtonBase {\n    handler: (event: any) => void;\n}\nexport interface MbscPopupOptions extends IBaseProps {\n    activeElm?: HTMLElement | string;\n    anchor?: HTMLElement;\n    anchorAlign?: 'start' | 'end' | 'center';\n    animation?: 'pop' | 'slide-down' | 'slide-up' | boolean;\n    buttons?: Array<MbscPopupButton | MbscPopupPredefinedButton | string>;\n    buttonVariant?: 'standard' | 'flat' | 'outline';\n    closeOnEsc?: boolean;\n    closeOnOverlayClick?: boolean;\n    closeOnScroll?: boolean;\n    contentPadding?: boolean;\n    disableLeftRight?: boolean;\n    display?: MbscPopupDisplay;\n    focusElm?: any;\n    focusOnClose?: boolean;\n    focusOnOpen?: boolean;\n    focusTrap?: boolean;\n    fullScreen?: boolean;\n    headerText?: string;\n    height?: string | number;\n    isOpen?: boolean;\n    maxHeight?: string | number;\n    maxWidth?: string | number;\n    scrollLock?: boolean;\n    showArrow?: boolean;\n    showOverlay?: boolean;\n    windowWidth?: number;\n    width?: string | number;\n    cancelText?: string;\n    closeText?: string;\n    okText?: string;\n    setText?: string;\n    onButtonClick?(args: any, inst: any): void;\n    onClose?(args: any, inst: any): void;\n    onClosed?(args: any, inst: any): void;\n    onKeyDown?(args: any, inst: any): void;\n    onOpen?(args: any, inst: any): void;\n    onPosition?(args: any, inst: any): void;\n    onResize?(args: any, inst: any): void;\n}\n/** @hidden */\nexport interface MbscPopupState {\n    arrowPos?: {\n        left?: string;\n        top?: string;\n    };\n    bubblePos?: 'top' | 'bottom' | 'left' | 'right';\n    isOpen?: boolean;\n    isReady?: boolean;\n    /** Top position of the popup */\n    modalTop?: number;\n    /** Left position of the popup */\n    modalLeft?: number;\n    /** Show or hide the popup arrow in anchored mode */\n    showArrow?: boolean;\n    /** Viewport width */\n    width?: number;\n    /** Viewport height */\n    height?: number;\n}\n/** @hidden */\nexport declare function processButtons(inst: any, buttons?: Array<IPopupButton | MbscPopupButton | string>): IPopupButton[] | undefined;\n/**\n * @hidden\n */\nexport declare class PopupBase extends BaseComponent<MbscPopupOptions, MbscPopupState> {\n    /** @hidden */\n    static defaults: MbscPopupOptions;\n    _active: HTMLElement;\n    _animation: string;\n    _buttons: IPopupButton[] | undefined;\n    _ctx: any;\n    _content: HTMLElement;\n    _flexButtons: boolean;\n    _hasContext: boolean;\n    _headerText: any;\n    _isClosing: boolean;\n    _isModal: boolean;\n    _isOpening: boolean;\n    _isOpen: boolean;\n    _isVisible: boolean;\n    _limitator: HTMLElement;\n    _limits: any;\n    _popup: HTMLElement;\n    _prevModal: PopupBase | undefined;\n    _round: boolean;\n    _style: any;\n    _wrapper: HTMLElement;\n    protected _justClosed: boolean;\n    protected _justOpened: boolean;\n    private _doc;\n    private _hasWidth;\n    private _lastFocus;\n    private _lock;\n    private _maxHeight;\n    private _maxWidth;\n    private _needsLock;\n    private _observer;\n    private _preventClose;\n    private _prevFocus;\n    private _scrollCont;\n    private _shouldPosition;\n    private _target;\n    private _vpWidth;\n    private _vpHeight;\n    private _win;\n    _onOverlayClick: () => void;\n    _onDocClick: (ev: any) => void;\n    _onMouseDown: (ev: any) => void;\n    _onMouseUp: (ev: any) => void;\n    _onPopupClick: () => void;\n    _onAnimationEnd: (ev: any) => void;\n    _onButtonClick: ({ domEvent, button }: {\n        domEvent: any;\n        button: MbscPopupButton;\n    }) => void;\n    _onFocus: (ev: any) => void;\n    _onKeyDown: (ev: any) => void;\n    _onContentScroll: (ev: any) => void;\n    _onScroll: (ev: any) => void;\n    _onWndKeyDown: (ev: any) => void;\n    _onResize: () => void;\n    /**\n     * Open\n     */\n    open(): void;\n    /**\n     * Close\n     */\n    close(): void;\n    /**\n     * Is open?\n     */\n    isVisible(): boolean;\n    position(): void;\n    protected _render(s: MbscPopupOptions, state: MbscPopupState): void;\n    protected _updated(): void;\n    protected _destroy(): void;\n    protected _onOpen(): void;\n    protected _onClose(): void;\n    protected _onOpened(): void;\n    protected _onClosed(): void;\n    private _unlisten;\n    private _close;\n}\n"]}