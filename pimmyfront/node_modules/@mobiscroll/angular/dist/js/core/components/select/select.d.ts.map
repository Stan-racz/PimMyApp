{"version":3,"file":"select.d.ts","sources":["select.d.ts"],"names":[],"mappingssourcesContent":["import { BaseComponent, IBaseEvent } from '../../base';\nimport { IScrollerProps, IScrollerValidateArgs, IWheelMoveArgs, MbscScrollerWheel, ScrollerBase } from '../scroller/scroller';\nexport interface MbscSelectOnFilterEvent extends IBaseEvent {\n    filterText: string;\n}\nexport interface MbscSelectOptions extends IScrollerProps {\n    clearIcon?: string;\n    data?: any[];\n    filter?: boolean;\n    showGroupWheel?: boolean;\n    selectMultiple?: boolean;\n    inputElement?: HTMLElement;\n    selectElement?: HTMLSelectElement;\n    filterPlaceholderText?: string;\n    filterEmptyText?: string;\n    onFilter?(ev: MbscSelectOnFilterEvent, inst: any): boolean;\n}\ninterface ISelectData {\n    group?: string;\n    text: string;\n    value: any;\n    disabled?: boolean;\n}\nexport declare class SelectBase extends BaseComponent<MbscSelectOptions, any> {\n    static defaults: MbscSelectOptions;\n    protected static _name: string;\n    /** @hidden */\n    _checkMarks: boolean;\n    /** @hidden */\n    _filterInput: HTMLInputElement;\n    /** @hidden */\n    _filterText: string;\n    /**\n     * @hidden\n     * Value and Label map for the option items\n     * Values are the keys and the labels are the values of the map\n     */\n    _map: Map<any, string>;\n    /** @hidden */\n    _noResults?: boolean;\n    /** @hidden */\n    _rows: number;\n    /** @hidden */\n    _scrollerClass: string;\n    /** @hidden */\n    _selectOnScroll: boolean;\n    /** @hidden */\n    _spaceAround: boolean;\n    /** @hidden */\n    _value: any;\n    /** @hidden */\n    _wheels: MbscScrollerWheel[][];\n    /**\n     * @hidden\n     * We specify a fix wheel width for the select when the filtering is on.\n     * In this case, we anticipate a large list, so we don't need the select to change it's width dynamically.\n     * This is required for custom filtering to work smoothly, without changing the width on content change.\n     */\n    _wheelWidth?: number | number[];\n    /** In case of angular directives, this property will hold the dynamically created instance of the component. */\n    protected _inst: SelectBase;\n    protected _options: ISelectData[];\n    /** Option elements changed */\n    protected _optionsReloaded: boolean;\n    protected _scroller: ScrollerBase;\n    private _debounce;\n    private _disabled;\n    private _disabledGroups;\n    /**\n     * A flag that indicates the changing of the group option\n     * We need this in the shouldValidate call, which is called from the Scroller,\n     * so we can't rely on the this.s and this._prevS values. In the scroller render\n     * the this.s and this._prevS are already the same for the select (bc of the react strict mode\n     * double rendering)\n     */\n    private _groupChanged;\n    private _isSelect;\n    /**\n     * Holds a map with the values and labels of the selected items\n     * It is rewritten on each value change\n     */\n    private _selectMap;\n    /**\n     * Serves as a gateway, that doesn't let the getVal method return a value that was created by the scroller's\n     * validation logic, unless there was actually a value in the first place (which was not null/undefined)\n     */\n    private _parsedValue;\n    /**\n     * @hidden\n     * It's the reverse map of the _map property.\n     * Used to get the value from the value text, when parsing the input text\n     * Keys are the labels and values are the value of the option items\n     */\n    private _reMap;\n    /** Event handler for the filter input change */\n    _onFilterChange: (e: any) => void;\n    /** Event handler for the clear filter input button */\n    _onFilterClear: () => void;\n    _shouldValidate: (s: MbscSelectOptions, prevS: MbscSelectOptions) => boolean;\n    _writeValue: (elm: HTMLInputElement, text: string, value: any) => boolean;\n    /** Reloads option elements from the DOM, when\n     * the Select Component is initialized on a select element\n     */\n    reloadOptionElements(): void;\n    setVal(value: any): void;\n    getVal(): any;\n    setTempVal(value: any): void;\n    getTempVal(): any;\n    open(): void;\n    close(): void;\n    _onResize: (args: any) => void;\n    _onChange: (args: any) => void;\n    _format: (valueRep: any[]) => string;\n    /**\n     * Parses the value into a value representation\n     * The select passes this function to the scroller, so the value\n     * representation is basically an array of values. Each index in the array represents\n     * one wheel. If a wheel has multiselect, the value on that index will be an array too.\n     * @param value The selected value or array of values in case of multiselect\n     * @returns The value representation of the scroller. See above description for more info.\n     */\n    _parse: (value: any) => any[];\n    _get: (valueRep: any[]) => any;\n    _valueEquals: (v1: any, v2: any) => boolean;\n    _onWheelMove: ({ wheelIndex, selection, dataItem }: IWheelMoveArgs) => any[];\n    _validate: ({ values, direction, wheels, index }: IScrollerValidateArgs) => {\n        disabled?: {}[];\n        valid?: any[];\n        indexes?: any[];\n    };\n    _onClose: (args: any) => void;\n    /**\n     * Saves a map (value-label) from the selected values passed to it\n     * @param values value or array of values depending on selectMultiple option\n     */\n    protected _saveSelected: (values: any) => void;\n    protected _render(s: MbscSelectOptions): void;\n    protected _createOptionList(data: ISelectData[]): void;\n    /**\n     * Proxies the function call to either the _inst or the _scroller\n     * based on which is available.\n     * NOTE: In the case of the angular directive, methods should be called on the _inst,\n     * while otherwise the _scroller has these methods.\n     * @param method The method name you want ot call\n     * @param args Array of the arguments passed to the method\n     * @returns\n     */\n    private _proxy;\n    private _createWheels;\n    /**\n     * Sets the optionlist from querying the <option> elements\n     */\n    private _setOptionsFromElm;\n    /**\n     * Triggers the onFilter event and sets the filterText to the state,\n     * so the next render cycle can do the filtering based on it\n     */\n    private _filter;\n}\nexport {};\n"]}