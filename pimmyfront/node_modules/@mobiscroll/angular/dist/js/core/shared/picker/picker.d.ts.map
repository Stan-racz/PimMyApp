{"version":3,"file":"picker.d.ts","sources":["picker.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { BaseComponent, IBaseProps } from '../../base';\nimport { IPopupButton, MbscPopupButton, MbscPopupDisplay, MbscPopupPredefinedButton, PopupBase } from '../../components/popup/popup';\nimport { DateType, IValidateProps } from '../../util/datetime';\n/**\n * Options for all picker components\n */\nexport interface IPickerProps extends IBaseProps {\n    activeElm?: HTMLElement | string;\n    defaultSelection?: any;\n    defaultValue?: any;\n    disabled?: boolean;\n    element?: any;\n    inputComponent?: any;\n    inputProps?: any;\n    invalid?: DateType[] | IValidateProps[];\n    inputTyping?: boolean;\n    selectMultiple?: boolean;\n    showInput?: boolean;\n    showOnFocus?: boolean;\n    showOnClick?: boolean;\n    valid?: DateType[] | IValidateProps[];\n    value?: any;\n    valueMap?: any;\n    dropdown?: boolean;\n    endIcon?: string;\n    endIconSrc?: string;\n    endIconSvg?: string;\n    error?: boolean;\n    errorMessage?: string;\n    inputStyle?: 'underline' | 'outline' | 'box';\n    label?: string;\n    labelStyle?: 'floating' | 'stacked' | 'inline';\n    name?: string;\n    placeholder?: string;\n    startIcon?: string;\n    startIconSrc?: string;\n    startIconSvg?: string;\n    tagInput?: boolean;\n    anchor?: HTMLElement;\n    anchorAlign?: 'start' | 'end' | 'center';\n    animation?: 'pop' | 'slide-down' | 'slide-up' | boolean;\n    buttons?: Array<MbscPopupButton | MbscPopupPredefinedButton | string>;\n    closeOnEsc?: boolean;\n    closeOnOverlayClick?: boolean;\n    closeOnScroll?: boolean;\n    display?: MbscPopupDisplay;\n    focusOnClose?: boolean;\n    focusTrap?: boolean;\n    fullScreen?: boolean;\n    headerText?: string;\n    height?: string | number;\n    isOpen?: boolean;\n    maxHeight?: string | number;\n    maxWidth?: string | number;\n    scrollLock?: boolean;\n    showArrow?: boolean;\n    showOverlay?: boolean;\n    width?: string | number;\n    cancelText?: string;\n    clearText?: string;\n    closeText?: string;\n    okText?: string;\n    setText?: string;\n    onCancel?(args: any, inst: any): void;\n    onChange?(args: any, inst: any): void;\n    onTempChange?(args: any, inst: any): void;\n    onClose?(args: any, inst: any): void;\n    onOpen?(args: any, inst: any): void;\n    onResize?(args: any, inst: any): void;\n}\nexport interface IPickerState {\n    isOpen?: boolean;\n    value?: any;\n    width?: number;\n}\nexport declare function getIonInput(el: any, cb: (inp: HTMLInputElement) => void, nr?: number): void;\nexport declare function isIonInput(el: any): any;\n/** @hidden */\nexport declare class PickerBase<PropType extends IPickerProps, StateType extends IPickerState> extends BaseComponent<PropType, StateType> {\n    static defaults: any;\n    /** @hidden */\n    _allowTyping: boolean | undefined;\n    /** @hidden */\n    _anchor: any;\n    /** @hidden */\n    _anchorAlign: 'start' | 'end' | 'center';\n    /** @hidden */\n    _buttons?: IPopupButton[];\n    /** @hidden */\n    _cssClass: any;\n    /** @hidden */\n    _focusElm: HTMLElement;\n    /** @hidden */\n    _headerText: string | undefined;\n    /** @hidden */\n    _isOpen: boolean;\n    /** @hidden */\n    _live: boolean;\n    /** @hidden */\n    _maxWidth: string | number | undefined;\n    /** @hidden */\n    _popup: PopupBase | null;\n    /** @hidden */\n    _scrollLock?: boolean;\n    /** @hidden */\n    _showInput: boolean;\n    /** @hidden */\n    _tempValueRep: any;\n    /** @hidden */\n    _tempValueText: string;\n    /** @hidden */\n    _value: any;\n    /** @hidden */\n    _valueRep: any;\n    /** @hidden */\n    _valueText: string;\n    /** @hidden */\n    _wrapper: HTMLElement | null;\n    /**\n     * In case of angular directives, this property will hold the dynamically\n     * create instance of the component. In other cases this will be undefined.\n     */\n    protected _inst: PickerBase<PropType, StateType>;\n    protected _isMbsc: boolean;\n    protected _valueTextChange: boolean;\n    protected _oldValueText: string;\n    protected _win: any;\n    protected _shouldInitInput: boolean;\n    /** Flag for skipping the value parsing on open. When the tempValue is set programmatically, the selected value\n     * shouldn't be parsed and put to the temp, because it would overwrite the temporarily set value.\n     */\n    protected _tempValueSet: boolean;\n    /** Does the picker support the null value\n     * If the null value is not supported by the picker, it will trigger a change when the value differs after parse.\n     * If the null value is supported by the picker, it will not trigger a change when the tempValueRep changes after parse.\n     */\n    protected _nullSupport: boolean;\n    protected _preventChange: boolean;\n    private _handler;\n    private _input;\n    private _observer;\n    private _preventShow;\n    private _readOnly;\n    private _tempValue;\n    private _unlisten;\n    open(): void;\n    close(): void;\n    set(): void;\n    position(): void;\n    isVisible(): boolean;\n    getVal(): any;\n    setVal(value: any): void;\n    /** Returns the temporary value selected on the picker. */\n    getTempVal(): any;\n    /**\n     * Sets the Picker temporary value. This temp value is shown on the picker until the selection.\n     * In the case of inline mode or when the touchUi setting is false the value will be set to the Model as well,\n     * since in these cases there's no temporary value.\n     * @param value The value to set to the datepicker as temporary value\n     */\n    setTempVal(value: any): void;\n    _onInputClick: (ev: any) => void;\n    _onInputFocus: (ev: any) => void;\n    _onInputMouseDown: (ev: any) => void;\n    _onInputKey: (ev: any) => void;\n    _onInputChange: (ev: any, val?: any) => void;\n    _onResize: (args: any) => void;\n    _onWrapperResize: () => void;\n    _onPopupClose: (args: any) => void;\n    _onPopupClosed: (args: any) => void;\n    _onPopupKey: (args: any) => void;\n    _onPopupOpen: (args: any) => void;\n    _onWinFocus: () => void;\n    _onButtonClick: ({ domEvent, button }: {\n        domEvent: any;\n        button: IPopupButton;\n    }) => void;\n    _setInput: (inp: any) => void;\n    _setPopup: (popup: PopupBase) => void;\n    _setWrapper: (wrapper: HTMLElement) => void;\n    _shouldValidate(s: IPickerProps, prevS: IPickerProps): boolean;\n    _valueEquals(v1: any, v2: any): boolean;\n    protected _render(s: IPickerProps, state: IPickerState): void;\n    protected _updated(): void;\n    /**\n     * Writes the value to the element and returns if the value was changed\n     * @param elm The HTML element the value should be written to\n     * @param text The value text that's written into the element\n     */\n    protected _writeValue(elm: HTMLInputElement, text: string, value: any): boolean;\n    protected _destroy(): void;\n    protected _setHeader(): void;\n    protected _setOrUpdate(preventChange?: boolean): void;\n    /**\n     * Returns a copy of the value representation.\n     * Is used to copy the temporary value to the final value and vica versa.\n     * @param value The value to copy.\n     */\n    protected _copy(value: any): any;\n    /**\n     * Formats the value representation into a string to display the selection.\n     * @param value The value to format.\n     */\n    protected _format(value: any): string;\n    /**\n     * Transforms the value representation into the actual value.\n     * E.g. in case of date scroller the value is represented as an array like [5, 28, 2020],\n     * this function will transform it into a date object.\n     * @param value The value to transform.\n     */\n    protected _get(value: any): any;\n    /**\n     * Parses a string or actual value into the value representation.\n     * E.g. in case of the date scroller the '05/28/2020' string should be parsed into [5, 28, 2020].\n     * @param valueText The value to parse.\n     */\n    protected _parse(valueText: any, fromInput?: boolean): any;\n    protected _validate(): void;\n    protected _onClosed(): void;\n    protected _onOpen(): void;\n    protected _onParse(): void;\n    /**\n     * Default behavior for the enter key in a picker to set the selection and close the picker\n     * @param args\n     */\n    protected _onEnterKey(args: any): void;\n    private _change;\n    private _readValue;\n    private _initEl;\n    private _resetEl;\n    private _write;\n}\n"]}