{"version":3,"file":"base.d.ts","sources":["base.d.ts"],"names":[],"mappingssourcesContent":["import { Base } from '../angular/base';\nexport declare const version = \"5.18.3\";\n/**\n * @hidden\n * Interface for modules, add-ons\n */\nexport interface IModule {\n    init(inst: any): void;\n}\n/**\n * @hidden\n * Preact with typescript complains about these props missing,\n * so adding it here\n */\nexport interface IBaseProps {\n    context?: any;\n    cssClass?: string;\n    responsive?: {\n        [key: string]: any;\n    };\n    rtl?: boolean;\n    theme?: string;\n    themeVariant?: 'light' | 'dark' | 'auto';\n    touchUi?: boolean | 'auto';\n    locale?: string | {};\n    modules?: IModule[];\n    /** @hidden */\n    baseTheme?: any;\n    /** @hidden */\n    children?: any;\n    /** @hidden */\n    class?: string;\n    /** @hidden */\n    className?: string;\n    /** @hidden */\n    dangerouslySetInnerHTML?: any;\n    /** @hidden */\n    hasChildren?: boolean;\n    /** @hidden */\n    key?: any;\n    /** @hidden */\n    ref?: any;\n    /** @hidden */\n    style?: any;\n    onDestroy?(args: any, inst: BaseComponent<IBaseProps, {}>): void;\n    onInit?(args: any, inst: BaseComponent<IBaseProps, {}>): void;\n}\nexport interface IBaseEvent {\n    inst?: any;\n    type?: string;\n}\n/** @hidden */\nexport declare class BaseComponent<PropType extends IBaseProps, StateType> extends Base<PropType, StateType> {\n    /** @hidden */\n    static defaults: any;\n    protected static _name: string;\n    readonly nativeElement: HTMLElement;\n    /** @hidden */\n    s: PropType;\n    /** @hidden */\n    state: StateType;\n    /** @hidden */\n    _className: string;\n    /** @hidden */\n    _hb: string;\n    /**\n     * Used to identify if it's a mobiscroll component\n     * @hidden\n     */\n    _mbsc: boolean;\n    /** @hidden */\n    _rtl: string;\n    /** @hidden */\n    _theme: string;\n    /** @hidden */\n    _touchUi: boolean;\n    /** @hidden */\n    _v: any;\n    /**\n     * Needed for preact for dynamic updates, because props is immutable.\n     * Merge this into the computed settings as well.\n     */\n    protected _prevS: PropType;\n    protected _respProps: PropType;\n    protected _shouldEnhance: HTMLElement | string | boolean | null | undefined;\n    protected _zone: any;\n    protected _optChange: number;\n    protected _uid: number;\n    protected readonly __getTextParam: any;\n    private _textParam;\n    readonly textParam: any;\n    private _textParamMulti;\n    textParamMulti(key: any): any;\n    protected __getText: Function;\n    destroy(): void;\n    _hook(name: string, args: any): any;\n    protected __init(): void;\n    protected __destroy(): void;\n    protected _render(s: PropType, state: StateType): void;\n    protected _willUpdate(): void;\n    private _resp;\n    private _merge;\n}\n"]}