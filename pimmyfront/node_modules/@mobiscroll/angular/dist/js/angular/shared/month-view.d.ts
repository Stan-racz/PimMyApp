import { TemplateRef } from '@angular/core';
import { MbscCalendarEvent, MbscResource } from '../../core/shared/calendar-view/calendar-view.types';
import { MonthViewBase } from '../../core/shared/calendar-view/month-view';
import { DateType, ITimezonePlugin } from '../../core/util/datetime';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export declare class MbscMonthView extends MonthViewBase {
    activeDate: number;
    amText: string;
    calendarType: 'year' | 'month' | 'week';
    cellTextHeight: number;
    clickToCreate: boolean | 'double' | 'single';
    colors: {};
    dataTimezone: string;
    dayNames: string[];
    dayNamesMin: string[];
    dayNamesShort: string[];
    dayTemplate: TemplateRef<any>;
    dayContentTemplate: TemplateRef<any>;
    displayTimezone: string;
    dragToCreate: boolean;
    dragToResize: boolean;
    dragToMove: boolean;
    eventText: string;
    eventsText: string;
    exclusiveEndDates: boolean;
    firstDay: number;
    firstPageDay: number;
    hasMarks: boolean;
    hoverEnd: number;
    hoverStart: number;
    isActive: boolean;
    isPicker: boolean;
    invalid: {};
    labels: {};
    labelHeight: number;
    labelTemplate: TemplateRef<any>;
    labelContentTemplate: TemplateRef<any>;
    dragData?: {
        [key: number]: any[];
    };
    marked: {};
    max: DateType;
    min: DateType;
    monthNames: string[];
    monthNamesShort: string[];
    pmText: string;
    rangeEnd: number;
    rangeStart: number;
    selectedDates: any;
    selectedEventsMap?: {
        [key: number]: MbscCalendarEvent;
    };
    showEventTooltip: any;
    showOuter: boolean;
    showWeekDays: boolean;
    showWeekNumbers: boolean;
    showSingleMark: boolean;
    resourcesMap?: {
        [key: number]: MbscResource;
    };
    todayText: string;
    timeFormat: string;
    timezonePlugin: ITimezonePlugin;
    valid: {};
    variableRow: boolean;
    weeks: number;
    weekText: string;
    getDate: (y: number, m: number, d: number) => Date;
    getDay: (d: Date) => number;
    getMonth: (d: Date) => number;
    getWeekNumber: (d: Date) => number;
    getYear: (d: Date) => number;
    onDayClick: (args: any) => void;
    onDayDoubleClick: (args: any) => void;
    onDayRightClick: (args: any) => void;
    onDayHoverIn: (args: any) => void;
    onDayHoverOut: (args: any) => void;
    onLabelClick: (args: any) => void;
    onLabelDoubleClick: (args: any) => void;
    onLabelRightClick: (args: any) => void;
    onLabelHoverIn: (args: any) => void;
    onLabelHoverOut: (args: any) => void;
    onLabelDelete: (args: any) => void;
    onLabelUpdateStart: (args: any) => void;
    onLabelUpdateMove: (args: any) => void;
    onLabelUpdateEnd: (args: any) => void;
    onLabelUpdateModeOn: (args: any) => void;
    onLabelUpdateModeOff: (args: any) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MbscMonthView, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<MbscMonthView, "mbsc-month-view", never, { "activeDate": "activeDate"; "amText": "amText"; "calendarType": "calendarType"; "cellTextHeight": "cellTextHeight"; "clickToCreate": "clickToCreate"; "colors": "colors"; "dataTimezone": "dataTimezone"; "dayNames": "dayNames"; "dayNamesMin": "dayNamesMin"; "dayNamesShort": "dayNamesShort"; "dayTemplate": "dayTemplate"; "dayContentTemplate": "dayContentTemplate"; "displayTimezone": "displayTimezone"; "dragToCreate": "dragToCreate"; "dragToResize": "dragToResize"; "dragToMove": "dragToMove"; "eventText": "eventText"; "eventsText": "eventsText"; "exclusiveEndDates": "exclusiveEndDates"; "firstDay": "firstDay"; "firstPageDay": "firstPageDay"; "hasMarks": "hasMarks"; "hoverEnd": "hoverEnd"; "hoverStart": "hoverStart"; "isActive": "isActive"; "isPicker": "isPicker"; "invalid": "invalid"; "labels": "labels"; "labelHeight": "labelHeight"; "labelTemplate": "labelTemplate"; "labelContentTemplate": "labelContentTemplate"; "dragData": "dragData"; "marked": "marked"; "max": "max"; "min": "min"; "monthNames": "monthNames"; "monthNamesShort": "monthNamesShort"; "pmText": "pmText"; "rangeEnd": "rangeEnd"; "rangeStart": "rangeStart"; "selectedDates": "selectedDates"; "selectedEventsMap": "selectedEventsMap"; "showEventTooltip": "showEventTooltip"; "showOuter": "showOuter"; "showWeekDays": "showWeekDays"; "showWeekNumbers": "showWeekNumbers"; "showSingleMark": "showSingleMark"; "resourcesMap": "resourcesMap"; "todayText": "todayText"; "timeFormat": "timeFormat"; "timezonePlugin": "timezonePlugin"; "valid": "valid"; "variableRow": "variableRow"; "weeks": "weeks"; "weekText": "weekText"; "getDate": "getDate"; "getDay": "getDay"; "getMonth": "getMonth"; "getWeekNumber": "getWeekNumber"; "getYear": "getYear"; "onDayClick": "onDayClick"; "onDayDoubleClick": "onDayDoubleClick"; "onDayRightClick": "onDayRightClick"; "onDayHoverIn": "onDayHoverIn"; "onDayHoverOut": "onDayHoverOut"; "onLabelClick": "onLabelClick"; "onLabelDoubleClick": "onLabelDoubleClick"; "onLabelRightClick": "onLabelRightClick"; "onLabelHoverIn": "onLabelHoverIn"; "onLabelHoverOut": "onLabelHoverOut"; "onLabelDelete": "onLabelDelete"; "onLabelUpdateStart": "onLabelUpdateStart"; "onLabelUpdateMove": "onLabelUpdateMove"; "onLabelUpdateEnd": "onLabelUpdateEnd"; "onLabelUpdateModeOn": "onLabelUpdateModeOn"; "onLabelUpdateModeOff": "onLabelUpdateModeOff"; }, {}, never, never>;
}

//# sourceMappingURL=month-view.d.ts.map