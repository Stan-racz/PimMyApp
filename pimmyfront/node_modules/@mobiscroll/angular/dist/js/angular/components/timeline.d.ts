import { ElementRef, TemplateRef } from '@angular/core';
import { MbscCalendarEvent, MbscCalendarEventData, MbscNewEventData, MbscResource, MbscSlot } from '../../core/components/eventcalendar/eventcalendar';
import { TimelineBase } from '../../core/components/eventcalendar/timeline/timeline';
import { DateType, ITimezonePlugin } from '../../core/util/datetime';
import * as ɵngcc0 from '@angular/core';
export declare class MbscTimeline extends TimelineBase {
    vScrollCont: ElementRef;
    vGridCont: ElementRef;
    vHeaderCont: ElementRef;
    vResCont: ElementRef;
    vStickyHeader: ElementRef;
    vStickyDate: ElementRef;
    vStickyMonth: ElementRef;
    vStickyWeek: ElementRef;
    allDayText: string;
    amText: string;
    clickToCreate: boolean | 'single' | 'double';
    colorsMap: {
        [key: number]: MbscCalendarEvent[];
    };
    dateFormat: string;
    dateFormatLong: string;
    dataTimezone: string;
    dayNames: string[];
    dayNamesMin: string[];
    dayNamesShort: string[];
    displayTimezone: string;
    dragTimeStep: number;
    dragToCreate: boolean;
    dragToMove: boolean;
    dragToResize: boolean;
    endDay: number;
    endTime: string;
    eventDragEnd: (args: any) => void;
    eventMap: {
        [key: number]: MbscCalendarEvent[];
    };
    eventContentTemplate: TemplateRef<any>;
    eventOrder: (event1: MbscCalendarEvent, event2: MbscCalendarEvent) => number;
    eventTemplate: TemplateRef<any>;
    exclusiveEndDates: boolean;
    extendDefaultEvent: (args: MbscNewEventData) => MbscCalendarEvent;
    externalDrop: boolean;
    eventList: boolean;
    firstDay: number;
    fromText: string;
    getDay: (d: Date) => number;
    getDate: (y: number, m: number, d: number, h?: number, i?: number, s?: number, u?: number) => number;
    getMonth: (d: Date) => number;
    getWeekNumber: (d: Date) => number;
    getYear: (d: Date) => number;
    groupBy: 'date' | 'resource';
    height: number;
    invalidateEvent: 'start-end' | 'strict';
    invalidsMap: {
        [key: number]: MbscCalendarEvent[];
    };
    maxDate: number;
    minDate: number;
    monthNames: string[];
    monthNamesShort: string[];
    newEventText: string;
    nextIcon: string;
    nextIconRtl: string;
    downIcon: string;
    pmText: string;
    refDate: DateType;
    resources: MbscResource[] | null | undefined;
    resourceHeaderTemplate: TemplateRef<any>;
    resourceTemplate: TemplateRef<any>;
    rowHeight: 'variable' | 'equal';
    scroll: number;
    selected: number;
    selectedEventsMap: {
        [key: number]: MbscCalendarEvent;
    };
    showAllDay: boolean;
    showDays: boolean;
    showEventTooltip: boolean;
    size: number;
    slots: MbscSlot[] | null | undefined;
    slotTemplate: TemplateRef<any>;
    startDay: number;
    startTime: string;
    timeCellStep: number;
    timeFormat: string;
    timeLabelStep: number;
    timezonePlugin: ITimezonePlugin;
    toText: string;
    type: 'week' | 'day' | 'month' | 'year';
    weekNumbers: boolean;
    weekText: string;
    width: number;
    onCellClick: (args: any) => void;
    onCellDoubleClick: (args: any) => void;
    onCellRightClick: (args: any) => void;
    onEventClick: (args: any) => void;
    onEventDoubleClick: (args: any) => void;
    onEventRightClick: (args: any) => void;
    onEventHoverIn: (args: any) => void;
    onEventHoverOut: (args: any) => void;
    onEventDelete: (args: any) => void;
    onEventDragEnd: (args: any) => void;
    onEventDragStart: (args: any) => void;
    onWeekDayClick: (args: any) => void;
    _defId: string;
    _oneDay: number;
    _checkDisplay(event: MbscCalendarEventData): boolean;
    _getDayKey(index: number, day: any): number;
    _getEventArgs(dayEvents: any, slot: any, v: number, event: any, resource: string | number): {
        date: Date;
        domEvent: any;
        resource: string | number;
        slot: any;
        source: string;
    };
    _getEventKey(index: number, data: any): any;
    _getDragKey(resourceId: number | string, slotId: string | number, dateKey: string): string;
    _getId(index: number, data: any): any;
    protected _mounted(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MbscTimeline, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<MbscTimeline, "mbsc-timeline", never, { "allDayText": "allDayText"; "amText": "amText"; "clickToCreate": "clickToCreate"; "colorsMap": "colorsMap"; "dateFormat": "dateFormat"; "dateFormatLong": "dateFormatLong"; "dataTimezone": "dataTimezone"; "dayNames": "dayNames"; "dayNamesMin": "dayNamesMin"; "dayNamesShort": "dayNamesShort"; "displayTimezone": "displayTimezone"; "dragTimeStep": "dragTimeStep"; "dragToCreate": "dragToCreate"; "dragToMove": "dragToMove"; "dragToResize": "dragToResize"; "endDay": "endDay"; "endTime": "endTime"; "eventDragEnd": "eventDragEnd"; "eventMap": "eventMap"; "eventContentTemplate": "eventContentTemplate"; "eventOrder": "eventOrder"; "eventTemplate": "eventTemplate"; "exclusiveEndDates": "exclusiveEndDates"; "extendDefaultEvent": "extendDefaultEvent"; "externalDrop": "externalDrop"; "eventList": "eventList"; "firstDay": "firstDay"; "fromText": "fromText"; "getDay": "getDay"; "getDate": "getDate"; "getMonth": "getMonth"; "getWeekNumber": "getWeekNumber"; "getYear": "getYear"; "groupBy": "groupBy"; "height": "height"; "invalidateEvent": "invalidateEvent"; "invalidsMap": "invalidsMap"; "maxDate": "maxDate"; "minDate": "minDate"; "monthNames": "monthNames"; "monthNamesShort": "monthNamesShort"; "newEventText": "newEventText"; "nextIcon": "nextIcon"; "nextIconRtl": "nextIconRtl"; "downIcon": "downIcon"; "pmText": "pmText"; "refDate": "refDate"; "resources": "resources"; "resourceHeaderTemplate": "resourceHeaderTemplate"; "resourceTemplate": "resourceTemplate"; "rowHeight": "rowHeight"; "scroll": "scroll"; "selected": "selected"; "selectedEventsMap": "selectedEventsMap"; "showAllDay": "showAllDay"; "showDays": "showDays"; "showEventTooltip": "showEventTooltip"; "size": "size"; "slots": "slots"; "slotTemplate": "slotTemplate"; "startDay": "startDay"; "startTime": "startTime"; "timeCellStep": "timeCellStep"; "timeFormat": "timeFormat"; "timeLabelStep": "timeLabelStep"; "timezonePlugin": "timezonePlugin"; "toText": "toText"; "type": "type"; "weekNumbers": "weekNumbers"; "weekText": "weekText"; "width": "width"; "onCellClick": "onCellClick"; "onCellDoubleClick": "onCellDoubleClick"; "onCellRightClick": "onCellRightClick"; "onEventClick": "onEventClick"; "onEventDoubleClick": "onEventDoubleClick"; "onEventRightClick": "onEventRightClick"; "onEventHoverIn": "onEventHoverIn"; "onEventHoverOut": "onEventHoverOut"; "onEventDelete": "onEventDelete"; "onEventDragEnd": "onEventDragEnd"; "onEventDragStart": "onEventDragStart"; "onWeekDayClick": "onWeekDayClick"; }, {}, never, never>;
}

//# sourceMappingURL=timeline.d.ts.map