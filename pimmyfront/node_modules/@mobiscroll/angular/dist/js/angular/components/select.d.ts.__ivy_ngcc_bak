import { AfterViewInit, ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';
import { MbscPopupButton, MbscPopupDisplay } from '../../core/components/popup/popup';
import { MbscScrollerWheel } from '../../core/components/scroller/scroller';
import { MbscSelectOnFilterEvent, SelectBase } from '../../core/components/select/select';
import { MbscInput } from './input';
import { MbscScroller } from './scroller';
export declare class MbscSelectOptionDirective {
}
export declare class MbscSelectOptionComponent implements AfterViewInit {
    private host;
    value: any;
    group: string;
    disabled: boolean;
    text: string;
    constructor(host: ElementRef);
    ngAfterViewInit(): void;
}
export declare class MbscSelectBase extends SelectBase {
    vInput: MbscInput;
    clearIcon: string;
    data: any[];
    defaultSelection: any;
    filter: boolean;
    showGroupWheel: boolean;
    circular: boolean | boolean[];
    displayStyle: MbscPopupDisplay;
    formatValue: (values: any[]) => string;
    getValue: (values: any[]) => any;
    maxWheelWidth: number | number[];
    minWheelWidth: number | number[];
    selectMultiple: boolean;
    itemHeight: number;
    itemTemplate: TemplateRef<any>;
    parseValue: (valueStr: string) => any[];
    rows: number;
    rtl: boolean;
    showOnClick: boolean;
    showOnFocus: boolean;
    valueEquality: (v1: any, v2: any) => boolean;
    wheels: MbscScrollerWheel[][];
    wheelWidth: number | number[];
    disabled: boolean;
    dropdown: boolean;
    endIcon: string;
    endIconSrc: string;
    endIconSvg: string;
    error: boolean;
    errorMessage: string;
    inputStyle: 'underline' | 'outline' | 'box';
    label: string;
    labelStyle: 'floating' | 'stacked' | 'inline';
    name: string;
    placeholder: string;
    startIcon: string;
    startIconSrc: string;
    startIconSvg: string;
    tagInput: boolean;
    anchor: any;
    animation: 'pop' | 'slide-up' | 'slide-down' | boolean;
    buttons: Array<MbscPopupButton | string>;
    cancelText: string;
    clearText: string;
    closeOnEsc: boolean;
    closeOnOverlayClick: boolean;
    closeText: string;
    context: any;
    display: MbscPopupDisplay;
    focusOnClose: boolean;
    focusTrap: boolean;
    headerText: string;
    height: number | string;
    setText: string;
    showArrow: boolean;
    showInput: boolean;
    showOverlay: boolean;
    width: number | string;
    filterEmptyText: string;
    filterPlaceholderText: string;
    onCancel: EventEmitter<any>;
    onChange: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onFilter: EventEmitter<MbscSelectOnFilterEvent>;
    onOpen: EventEmitter<any>;
    onTempChange: EventEmitter<any>;
    protected _onValueChange(value: any): void;
}
export declare class MbscSelect extends MbscSelectBase {
    vScroller: MbscScroller;
    optionComponents: QueryList<MbscSelectOptionComponent>;
    updateOptionlist(): void;
    _mounted(): void;
    valueSet(event: any): void;
}
export declare class MbscSelectDirective extends MbscSelectBase {
    optionElements: QueryList<any>;
    options: any;
    inputElement: any;
    private _cfr;
    private _ref;
    protected _ctor(): void;
    protected _init(): void;
    protected _destroy(): void;
    protected _render(s: any): void;
    protected _mounted(): void;
}
