{"version":3,"file":"eventcalendar.d.ts","sources":["eventcalendar.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnInit, TemplateRef } from '@angular/core';\nimport { EventcalendarBase, MbscCalendarEvent, MbscCalendarEventData, MbscCalendarLabel, MbscCellClickEvent, MbscCellHoverEvent, MbscEventcalendarOptions, MbscEventcalendarState, MbscEventcalendarView, MbscEventClickEvent, MbscEventCreatedEvent, MbscEventCreateEvent, MbscEventCreateFailedEvent, MbscEventDeletedEvent, MbscEventDeleteEvent, MbscEventDragEvent, MbscEventUpdatedEvent, MbscEventUpdateEvent, MbscEventUpdateFailedEvent, MbscLabelClickEvent, MbscNewEventData, MbscPageChangeEvent, MbscPageLoadedEvent, MbscPageLoadingEvent, MbscResource, MbscSelectedDateChangeEvent, MbscSelectedEventsChangeEvent, MbscSlot } from '../../core/components/eventcalendar/eventcalendar';\nimport { ICalendarViewHost, MbscCalendarColor, MbscCalendarMarked } from '../../core/shared/calendar-view/calendar-view.types';\nimport { DateType, ITimezonePlugin } from '../../core/util/datetime';\nimport { MbscCalendarView } from '../shared/calendar-view';\nimport { MbscInstanceService } from '../shared/instance.service';\nimport { MbscListItem } from './list-item';\nexport declare class MbscEventListService {\n    days: any;\n}\nexport declare class MbscEventListDayDirective implements OnInit {\n    private el;\n    private els;\n    timestamp: number;\n    constructor(el: ElementRef, els: MbscEventListService);\n    ngOnInit(): void;\n}\nexport declare class MbscEventListItem extends MbscListItem {\n    eventData: MbscCalendarEventData;\n    selected: boolean;\n    showColor: boolean;\n    template: TemplateRef<any>;\n    eventContentTemplate: TemplateRef<any>;\n}\n/**\n * The Eventcalendar component.\n *\n * Usage:\n *\n * ```\n * <mbsc-eventcalendar></mbsc-eventcalendar>\n * ```\n */\nexport declare class MbscEventcalendar extends EventcalendarBase implements ICalendarViewHost {\n    _hours: number[];\n    _els: MbscEventListService;\n    _instanceService: MbscInstanceService;\n    vList: ElementRef;\n    _calendarView: MbscCalendarView;\n    actionableEvents: boolean;\n    agendaTemplate: TemplateRef<any>;\n    calendarSystem: any;\n    clickToCreate: boolean | 'double' | 'single';\n    colors: MbscCalendarColor[];\n    data: MbscCalendarEvent[];\n    dayTemplate: TemplateRef<any>;\n    dayContentTemplate: TemplateRef<any>;\n    dataTimezone: string;\n    displayTimezone: string;\n    dragTimeStep: number;\n    dragToCreate: boolean;\n    dragToResize: boolean;\n    dragToMove: boolean;\n    eventContentTemplate: TemplateRef<any>;\n    eventDelete: boolean;\n    eventOrder: (event1: MbscCalendarEvent, event2: MbscCalendarEvent) => number;\n    eventTemplate: TemplateRef<any>;\n    exclusiveEndDates: boolean;\n    extendDefaultEvent: (args: MbscNewEventData) => MbscCalendarEvent;\n    externalDrop: boolean;\n    groupBy: 'date' | 'resource';\n    headerTemplate: TemplateRef<any>;\n    height: number | string;\n    invalid: any[];\n    invalidateEvent: 'start-end' | 'strict';\n    labelContentTemplate: TemplateRef<any>;\n    labels: MbscCalendarLabel[];\n    labelTemplate: TemplateRef<any>;\n    marked: MbscCalendarMarked[];\n    max: DateType;\n    min: DateType;\n    mousewheel: boolean;\n    refDate: DateType;\n    resources: MbscResource[] | null | undefined;\n    resourceHeaderTemplate: TemplateRef<any>;\n    resourceTemplate: TemplateRef<any>;\n    slots: MbscSlot[] | null | undefined;\n    slotTemplate: TemplateRef<any>;\n    scheduleEventContentTemplate: TemplateRef<any>;\n    scheduleEventTemplate: TemplateRef<any>;\n    selectedDate: DateType;\n    selectedDateChange: EventEmitter<DateType>;\n    selectedEvents: MbscCalendarEvent[];\n    selectedEventsChange: EventEmitter<MbscCalendarEvent[]>;\n    selectMultipleEvents: boolean;\n    showControls: boolean;\n    showEventTooltip: boolean;\n    valid: any[];\n    view: MbscEventcalendarView;\n    width: number | string;\n    allDayText: string;\n    amText: string;\n    dateFormat: string;\n    dateFormatLong: string;\n    dayNames: string[];\n    dayNamesMin: string[];\n    dayNamesShort: string[];\n    eventsText: string;\n    eventText: string;\n    firstDay: number;\n    monthNames: string[];\n    monthNamesShort: string[];\n    moreEventsPluralText: string;\n    moreEventsText: string;\n    newEventText: string;\n    nextPageText: string;\n    noEventsText: string;\n    pmText: string;\n    prevPageText: string;\n    timeFormat: string;\n    timezonePlugin: ITimezonePlugin;\n    onCellClick: EventEmitter<MbscCellClickEvent>;\n    onCellDoubleClick: EventEmitter<MbscCellClickEvent>;\n    onCellRightClick: EventEmitter<MbscCellClickEvent>;\n    onCellHoverIn: EventEmitter<MbscCellHoverEvent>;\n    onCellHoverOut: EventEmitter<MbscCellHoverEvent>;\n    onEventClick: EventEmitter<MbscEventClickEvent>;\n    onEventDoubleClick: EventEmitter<MbscEventClickEvent>;\n    onEventRightClick: EventEmitter<MbscEventClickEvent>;\n    onEventHoverIn: EventEmitter<MbscEventClickEvent>;\n    onEventHoverOut: EventEmitter<MbscEventClickEvent>;\n    onEventCreate: EventEmitter<MbscEventCreateEvent>;\n    onEventCreated: EventEmitter<MbscEventCreatedEvent>;\n    onEventDelete: EventEmitter<MbscEventDeleteEvent>;\n    onEventDeleted: EventEmitter<MbscEventDeletedEvent>;\n    onEventDragEnd: EventEmitter<MbscEventDragEvent>;\n    onEventDragStart: EventEmitter<MbscEventDragEvent>;\n    onEventUpdate: EventEmitter<MbscEventUpdateEvent>;\n    onEventUpdated: EventEmitter<MbscEventUpdatedEvent>;\n    onEventCreateFailed: EventEmitter<MbscEventCreateFailedEvent>;\n    onEventUpdateFailed: EventEmitter<MbscEventUpdateFailedEvent>;\n    onLabelClick: EventEmitter<MbscLabelClickEvent>;\n    onSelectedEventsChange: EventEmitter<MbscSelectedEventsChangeEvent>;\n    onPageChange: EventEmitter<MbscPageChangeEvent>;\n    onPageLoaded: EventEmitter<MbscPageLoadedEvent>;\n    onPageLoading: EventEmitter<MbscPageLoadingEvent>;\n    onSelectedDateChange: EventEmitter<MbscSelectedDateChangeEvent>;\n    _getEventArgs(eventList: any, $event: any, event: any): {\n        date: any;\n        domEvent: any;\n        event: any;\n        source: string;\n    };\n    _getPopoverEventArgs(state: any, $event: any, event: any): {\n        date: any;\n        domEvent: any;\n        event: any;\n        source: string;\n    };\n    protected _ctor(): void;\n    protected _mounted(): void;\n    protected _render(s: MbscEventcalendarOptions, state: MbscEventcalendarState): void;\n    protected _updated(): void;\n}\n"]}