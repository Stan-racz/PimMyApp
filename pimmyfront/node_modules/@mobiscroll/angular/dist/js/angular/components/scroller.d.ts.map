{"version":3,"file":"scroller.d.ts","sources":["scroller.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { MbscPopupButton, MbscPopupDisplay } from '../../core/components/popup/popup';\nimport { IWheelMoveArgs, MbscScrollerWheel, ScrollerBase } from '../../core/components/scroller/scroller';\nimport { MbscInput } from './input';\nimport { MbscPopup } from './popup';\n/**\n * The Scroller component.\n *\n * Usage:\n *\n * ```\n * <mbsc-scroller></mbsc-scroller>\n * ```\n */\nexport declare class MbscScroller extends ScrollerBase {\n    vInput: MbscInput;\n    vPopup: MbscPopup;\n    element: any;\n    writeValue: (elm: HTMLElement, text: string, value: any) => boolean;\n    circular: boolean | boolean[];\n    data: any;\n    displayStyle: MbscPopupDisplay;\n    filter: boolean;\n    formatValue: (values: any[]) => string;\n    getValue: (values: any[]) => any;\n    maxWheelWidth: number | number[];\n    minWheelWidth: number | number[];\n    inContentTemplate: any;\n    itemHeight: number;\n    itemTemplate: TemplateRef<any>;\n    onWheelMove: (args: IWheelMoveArgs) => any;\n    parseValue: (valueStr: string) => any[];\n    preContentTemplate: any;\n    preContentData: any;\n    rows: number;\n    selectMultiple: boolean;\n    selectOnScroll: boolean;\n    shouldValidate: (s: any, prevS: any) => boolean;\n    showInput: boolean;\n    showOnClick: boolean;\n    showOnFocus: boolean;\n    validate: (args: any) => any;\n    valueEquality: (v1: any, v2: any) => boolean;\n    valueMap: any;\n    wheels: MbscScrollerWheel[][];\n    wheelWidth: number | number[];\n    disabled: boolean;\n    dropdown: boolean;\n    endIcon: string;\n    endIconSrc: string;\n    endIconSvg: string;\n    error: boolean;\n    errorMessage: string;\n    inputStyle: 'underline' | 'outline' | 'box';\n    label: string;\n    labelStyle: 'floating' | 'stacked' | 'inline';\n    name: string;\n    placeholder: string;\n    startIcon: string;\n    startIconSrc: string;\n    startIconSvg: string;\n    activeElm: HTMLElement | string;\n    anchor: any;\n    animation: 'pop' | 'slide-up' | 'slide-down' | boolean;\n    buttons: Array<MbscPopupButton | string>;\n    cancelText: string;\n    closeOnEsc: boolean;\n    closeOnOverlayClick: boolean;\n    closeText: string;\n    context: any;\n    display: MbscPopupDisplay;\n    focusOnClose: boolean;\n    focusTrap: boolean;\n    headerText: string;\n    height: number | string;\n    maxHeight: number | string;\n    maxWidth: number | string;\n    setText: string;\n    showArrow: boolean;\n    showOverlay: boolean;\n    width: number | string;\n    clearText: string;\n    onCancel: EventEmitter<any>;\n    onChange: EventEmitter<any>;\n    onClose: EventEmitter<any>;\n    onOpen: EventEmitter<any>;\n    onTempChange: EventEmitter<any>;\n    onResize: EventEmitter<any>;\n}\n"]}