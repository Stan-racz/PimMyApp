import { ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';
import { DatepickerBase, MbscDatepickerOptions, MbscDatepickerState } from '../../core/components/datepicker/datepicker';
import { MbscPopupButton, MbscPopupDisplay } from '../../core/components/popup/popup';
import { DateType, ITimezonePlugin } from '../../core/util/datetime';
import { MbscInput } from './input';
import { MbscPopup } from './popup';
import * as ɵngcc0 from '@angular/core';
export declare class MbscDatepickerBase extends DatepickerBase {
    calendarHeaderTemplate: TemplateRef<any>;
    calendarScroll: 'horizontal' | 'vertical';
    calendarSize: number;
    calendarSystem: any;
    calendarType: 'year' | 'month' | 'week';
    colors: {};
    controls: any[];
    dataTimezone: string;
    defaultSelection: any;
    displayTimezone: string;
    element: any;
    endInput: any;
    firstSelectDay: number;
    inputTyping: boolean;
    invalid: any;
    inRangeInvalid: boolean;
    labels: {};
    marked: {};
    max: any;
    maxRange: number;
    maxTime: any;
    min: any;
    minRange: number;
    minTime: any;
    mode: 'date' | 'datetime' | 'time';
    modules: any[];
    moment: any;
    pages: number | 'auto';
    rangeHighlight: boolean;
    rangeEndInvalid: boolean;
    refDate: DateType;
    returnFormat: 'jsdate' | 'iso8601' | 'locale' | 'moment';
    showInput: boolean;
    startInput: any;
    stepHour: number;
    stepMinute: number;
    stepSecond: number;
    select: 'date' | 'range' | 'preset-range';
    selectCounter?: boolean;
    selectSize: number;
    selectMax: number;
    selectMin: number;
    selectMultiple?: boolean;
    showOuterDays: boolean;
    showRangeLabels: boolean;
    showWeekNumbers: boolean;
    tabs: boolean | 'auto';
    theme: string;
    timezonePlugin: ITimezonePlugin;
    valid: any;
    weeks: number;
    disabled: boolean;
    dropdown: boolean;
    endIcon: string;
    endIconSrc: string;
    endIconSvg: string;
    error: boolean;
    errorMessage: string;
    inputStyle: 'underline' | 'outline' | 'box';
    label: string;
    labelStyle: 'floating' | 'stacked' | 'inline';
    name: string;
    placeholder: string;
    startIcon: string;
    startIconSrc: string;
    startIconSvg: string;
    tagInput: boolean;
    circular: boolean | boolean[];
    clearText: string;
    itemHeight: number;
    maxWheelWidth: number | number[];
    minWheelWidth: number | number[];
    rows: number;
    showOnClick: boolean;
    showOnFocus: boolean;
    wheelWidth: number | number[];
    anchor: any;
    anchorAlign: 'start' | 'end' | 'center';
    animation: 'pop' | 'slide-up' | 'slide-down' | boolean;
    buttons: Array<MbscPopupButton | string>;
    cancelText: string;
    closeOnEsc: boolean;
    closeOnOverlayClick: boolean;
    closeOnScroll: boolean;
    closeText: string;
    context: any;
    display: MbscPopupDisplay;
    focusOnClose: boolean;
    focusTrap: boolean;
    fullScreen: boolean;
    headerText: string;
    height: number | string;
    isOpen: boolean;
    maxHeight: number | string;
    maxWidth: number | string;
    scrollLock: boolean;
    setText: string;
    showArrow: boolean;
    showOverlay: boolean;
    width: number | string;
    amText: string;
    dateFormat: string;
    dateWheels: string;
    dayNames: string[];
    dayNamesShort: string[];
    daySuffix: string;
    dayTemplate: TemplateRef<any>;
    dayContentTemplate: TemplateRef<any>;
    firstDay: number;
    monthNames: string[];
    monthNamesShort: string[];
    monthSuffix: string;
    moreEventsPluralText: string;
    moreEventsText: string;
    nextPageText: string;
    nowText: string;
    pmText: string;
    prevPageText: string;
    rangeEndHelp: string;
    rangeEndLabel: string;
    rangeStartHelp: string;
    rangeStartLabel: string;
    selectedPluralText: string;
    selectedText: string;
    timeFormat: string;
    timeWheels: string;
    yearSuffix: string;
    onCancel: EventEmitter<any>;
    onCellClick: EventEmitter<any>;
    onCellHoverIn: EventEmitter<any>;
    onCellHoverOut: EventEmitter<any>;
    onChange: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onLabelClick: EventEmitter<any>;
    onPageChange: EventEmitter<any>;
    onPageLoaded: EventEmitter<any>;
    onPageLoading: EventEmitter<any>;
    onOpen: EventEmitter<any>;
    onPosition: EventEmitter<any>;
    onTempChange: EventEmitter<any>;
    onActiveDateChange: EventEmitter<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MbscDatepickerBase, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MbscDatepickerBase, "[mbsc-dp-b]", never, { "calendarHeaderTemplate": "calendarHeaderTemplate"; "calendarScroll": "calendarScroll"; "calendarSize": "calendarSize"; "calendarSystem": "calendarSystem"; "calendarType": "calendarType"; "colors": "colors"; "controls": "controls"; "dataTimezone": "dataTimezone"; "defaultSelection": "defaultSelection"; "displayTimezone": "displayTimezone"; "element": "element"; "endInput": "endInput"; "firstSelectDay": "firstSelectDay"; "inputTyping": "inputTyping"; "invalid": "invalid"; "inRangeInvalid": "inRangeInvalid"; "labels": "labels"; "marked": "marked"; "max": "max"; "maxRange": "maxRange"; "maxTime": "maxTime"; "min": "min"; "minRange": "minRange"; "minTime": "minTime"; "mode": "mode"; "modules": "modules"; "moment": "moment"; "pages": "pages"; "rangeHighlight": "rangeHighlight"; "rangeEndInvalid": "rangeEndInvalid"; "refDate": "refDate"; "returnFormat": "returnFormat"; "showInput": "showInput"; "startInput": "startInput"; "stepHour": "stepHour"; "stepMinute": "stepMinute"; "stepSecond": "stepSecond"; "select": "select"; "selectCounter": "selectCounter"; "selectSize": "selectSize"; "selectMax": "selectMax"; "selectMin": "selectMin"; "selectMultiple": "selectMultiple"; "showOuterDays": "showOuterDays"; "showRangeLabels": "showRangeLabels"; "showWeekNumbers": "showWeekNumbers"; "tabs": "tabs"; "theme": "theme"; "timezonePlugin": "timezonePlugin"; "valid": "valid"; "weeks": "weeks"; "disabled": "disabled"; "dropdown": "dropdown"; "endIcon": "endIcon"; "endIconSrc": "endIconSrc"; "endIconSvg": "endIconSvg"; "error": "error"; "errorMessage": "errorMessage"; "inputStyle": "inputStyle"; "label": "label"; "labelStyle": "labelStyle"; "name": "name"; "placeholder": "placeholder"; "startIcon": "startIcon"; "startIconSrc": "startIconSrc"; "startIconSvg": "startIconSvg"; "tagInput": "tagInput"; "circular": "circular"; "clearText": "clearText"; "itemHeight": "itemHeight"; "maxWheelWidth": "maxWheelWidth"; "minWheelWidth": "minWheelWidth"; "rows": "rows"; "showOnClick": "showOnClick"; "showOnFocus": "showOnFocus"; "wheelWidth": "wheelWidth"; "anchor": "anchor"; "anchorAlign": "anchorAlign"; "animation": "animation"; "buttons": "buttons"; "cancelText": "cancelText"; "closeOnEsc": "closeOnEsc"; "closeOnOverlayClick": "closeOnOverlayClick"; "closeOnScroll": "closeOnScroll"; "closeText": "closeText"; "context": "context"; "display": "display"; "focusOnClose": "focusOnClose"; "focusTrap": "focusTrap"; "fullScreen": "fullScreen"; "headerText": "headerText"; "height": "height"; "isOpen": "isOpen"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "scrollLock": "scrollLock"; "setText": "setText"; "showArrow": "showArrow"; "showOverlay": "showOverlay"; "width": "width"; "amText": "amText"; "dateFormat": "dateFormat"; "dateWheels": "dateWheels"; "dayNames": "dayNames"; "dayNamesShort": "dayNamesShort"; "daySuffix": "daySuffix"; "dayTemplate": "dayTemplate"; "dayContentTemplate": "dayContentTemplate"; "firstDay": "firstDay"; "monthNames": "monthNames"; "monthNamesShort": "monthNamesShort"; "monthSuffix": "monthSuffix"; "moreEventsPluralText": "moreEventsPluralText"; "moreEventsText": "moreEventsText"; "nextPageText": "nextPageText"; "nowText": "nowText"; "pmText": "pmText"; "prevPageText": "prevPageText"; "rangeEndHelp": "rangeEndHelp"; "rangeEndLabel": "rangeEndLabel"; "rangeStartHelp": "rangeStartHelp"; "rangeStartLabel": "rangeStartLabel"; "selectedPluralText": "selectedPluralText"; "selectedText": "selectedText"; "timeFormat": "timeFormat"; "timeWheels": "timeWheels"; "yearSuffix": "yearSuffix"; }, { "onCancel": "onCancel"; "onCellClick": "onCellClick"; "onCellHoverIn": "onCellHoverIn"; "onCellHoverOut": "onCellHoverOut"; "onChange": "onChange"; "onClose": "onClose"; "onLabelClick": "onLabelClick"; "onPageChange": "onPageChange"; "onPageLoaded": "onPageLoaded"; "onPageLoading": "onPageLoading"; "onOpen": "onOpen"; "onPosition": "onPosition"; "onTempChange": "onTempChange"; "onActiveDateChange": "onActiveDateChange"; }, never>;
}
/**
 * The Datepicker component.
 *
 * Usage:
 *
 * ```
 * <mbsc-datepicker></mbsc-datepicker>
 * ```
 */
export declare class MbscDatepicker extends MbscDatepickerBase {
    vInput: MbscInput;
    vPopup: MbscPopup;
    vWrapper: ElementRef;
    _controlRefs: QueryList<any>;
    protected _render(s: MbscDatepickerOptions, state: MbscDatepickerState): void;
    protected _destroy(): void;
    protected _onClosed(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MbscDatepicker, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<MbscDatepicker, "mbsc-datepicker", never, {}, {}, never, ["*"]>;
}
export declare class MbscDatepickerDirective extends MbscDatepickerBase {
    options: any;
    private _cfr;
    private _ref;
    protected _ctor(): void;
    protected _init(): void;
    protected _destroy(): void;
    protected _render(s: any, state: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MbscDatepickerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MbscDatepickerDirective, "[mbsc-datepicker]", ["mobiscroll"], { "options": "mbscOptions"; }, {}, never>;
}

//# sourceMappingURL=datepicker.d.ts.map