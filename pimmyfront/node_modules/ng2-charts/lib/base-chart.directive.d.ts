import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Chart, ChartConfiguration, ChartEvent, ChartType, DefaultDataPoint } from 'chart.js';
import { ThemeService } from './theme.service';
<<<<<<< HEAD
import * as i0 from "@angular/core";
export declare class BaseChartDirective<TType extends ChartType = ChartType, TData = DefaultDataPoint<TType>, TLabel = unknown> implements OnDestroy, OnChanges {
=======
import { ChartConfiguration, ChartDataSets, ChartOptions, ChartPoint, ChartType, PluginServiceGlobalRegistration, PluginServiceRegistrationOptions } from 'chart.js';
import * as ɵngcc0 from '@angular/core';
export declare type SingleDataSet = Array<number | null | undefined | number[]> | ChartPoint[];
export declare type MultiDataSet = SingleDataSet[];
export declare type SingleOrMultiDataSet = SingleDataSet | MultiDataSet;
export declare type PluginServiceGlobalRegistrationAndOptions = PluginServiceGlobalRegistration & PluginServiceRegistrationOptions;
export declare type SingleLineLabel = string;
export declare type MultiLineLabel = string[];
export declare type Label = SingleLineLabel | MultiLineLabel;
export declare class BaseChartDirective implements OnChanges, OnInit, OnDestroy, DoCheck {
>>>>>>> eeb60a1e (PYMAF-0: ajout des routes)
    private element;
    private zone;
    private themeService;
    type: ChartConfiguration<TType, TData, TLabel>['type'];
    legend?: boolean;
    data?: ChartConfiguration<TType, TData, TLabel>['data'];
    options?: ChartConfiguration<TType, TData, TLabel>['options'];
    plugins?: ChartConfiguration<TType, TData, TLabel>['plugins'];
    labels?: ChartConfiguration<TType, TData, TLabel>['data']['labels'];
    datasets?: ChartConfiguration<TType, TData, TLabel>['data']['datasets'];
    chartClick: EventEmitter<{
        event?: ChartEvent;
        active?: {}[];
    }>;
    chartHover: EventEmitter<{
        event: ChartEvent;
        active: {}[];
    }>;
    ctx: string;
    chart?: Chart<TType, TData, TLabel>;
    private subs;
    private themeOverrides;
    constructor(element: ElementRef, zone: NgZone, themeService: ThemeService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    render(): Chart<TType, TData, TLabel>;
    update(duration?: any): void;
    hideDataset(index: number, hidden: boolean): void;
<<<<<<< HEAD
    isDatasetHidden(index: number): boolean | undefined;
    toBase64Image(): string | undefined;
    private themeChanged;
    private getChartOptions;
    private getChartConfiguration;
    private getChartData;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseChartDirective<any, any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BaseChartDirective<any, any, any>, "canvas[baseChart]", ["base-chart"], { "type": "type"; "legend": "legend"; "data": "data"; "options": "options"; "plugins": "plugins"; "labels": "labels"; "datasets": "datasets"; }, { "chartClick": "chartClick"; "chartHover": "chartHover"; }, never>;
=======
    isDatasetHidden(index: number): boolean;
    toBase64Image(): string;
    getChartConfiguration(): ChartConfiguration;
    getChartBuilder(ctx: string): Chart;
    smartMerge(options: any, overrides: any, level?: number): any;
    private isMultiLineLabel;
    private joinLabel;
    private propagateDatasetsToData;
    private propagateDataToDatasets;
    private isMultiDataSet;
    private getDatasets;
    private refresh;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<BaseChartDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<BaseChartDirective, "canvas[baseChart]", ["base-chart"], { "options": "options"; "data": "data"; "datasets": "datasets"; "labels": "labels"; "chartType": "chartType"; "colors": "colors"; "legend": "legend"; "plugins": "plugins"; }, { "chartClick": "chartClick"; "chartHover": "chartHover"; }, never>;
>>>>>>> eeb60a1e (PYMAF-0: ajout des routes)
}

//# sourceMappingURL=base-chart.directive.d.ts.map