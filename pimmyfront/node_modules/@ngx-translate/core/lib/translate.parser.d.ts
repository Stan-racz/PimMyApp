<<<<<<< HEAD
import * as i0 from "@angular/core";
=======
import * as ɵngcc0 from '@angular/core';
>>>>>>> eeb60a1e (PYMAF-0: ajout des routes)
export declare abstract class TranslateParser {
    /**
     * Interpolates a string to replace parameters
     * "This is a {{ key }}" ==> "This is a value", with params = { key: "value" }
     * @param expr
     * @param params
     */
    abstract interpolate(expr: string | Function, params?: any): string | undefined;
    /**
     * Gets a value from an object by composed key
     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'
     * @param target
     * @param key
     */
    abstract getValue(target: any, key: string): any;
}
export declare class TranslateDefaultParser extends TranslateParser {
    templateMatcher: RegExp;
    interpolate(expr: string | Function, params?: any): string;
    getValue(target: any, key: string): any;
    private interpolateFunction;
    private interpolateString;
<<<<<<< HEAD
    static ɵfac: i0.ɵɵFactoryDeclaration<TranslateDefaultParser, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TranslateDefaultParser>;
=======
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TranslateDefaultParser, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<TranslateDefaultParser>;
>>>>>>> eeb60a1e (PYMAF-0: ajout des routes)
}

//# sourceMappingURL=translate.parser.d.ts.map