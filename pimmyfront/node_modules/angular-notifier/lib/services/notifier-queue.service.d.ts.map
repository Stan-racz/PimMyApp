{"version":3,"file":"notifier-queue.service.d.ts","sources":["notifier-queue.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Subject } from 'rxjs';\r\nimport { NotifierAction } from '../models/notifier-action.model';\r\n/**\r\n * Notifier queue service\r\n *\r\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\r\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\r\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\r\n * processes them at the right time (which is when the previous action has been processed successfully).\r\n *\r\n * Technical sidenote:\r\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\r\n */\r\nexport declare class NotifierQueueService {\r\n    /**\r\n     * Stream of actions, subscribable from outside\r\n     */\r\n    readonly actionStream: Subject<NotifierAction>;\r\n    /**\r\n     * Queue of actions\r\n     */\r\n    private actionQueue;\r\n    /**\r\n     * Flag, true if some action is currently in progress\r\n     */\r\n    private isActionInProgress;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor();\r\n    /**\r\n     * Push a new action to the queue, and try to run it\r\n     *\r\n     * @param action Action object\r\n     */\r\n    push(action: NotifierAction): void;\r\n    /**\r\n     * Continue with the next action (called when the current action is finished)\r\n     */\r\n    continue(): void;\r\n    /**\r\n     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\r\n     */\r\n    private tryToRunNextAction;\r\n}\r\n"]}