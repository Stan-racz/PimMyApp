{"version":3,"file":"notifier.service.d.ts","sources":["notifier.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NotifierConfig } from '../models/notifier-config.model';\r\nimport { NotifierNotificationOptions } from '../models/notifier-notification.model';\r\nimport { NotifierQueueService } from './notifier-queue.service';\r\n/**\r\n * Notifier service\r\n *\r\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\r\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\r\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\r\n */\r\nexport declare class NotifierService {\r\n    /**\r\n     * Notifier queue service\r\n     */\r\n    private readonly queueService;\r\n    /**\r\n     * Notifier configuration\r\n     */\r\n    private readonly config;\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param notifierQueueService Notifier queue service\r\n     * @param config               Notifier configuration, optionally injected as a dependency\r\n     */\r\n    constructor(notifierQueueService: NotifierQueueService, config: NotifierConfig);\r\n    /**\r\n     * Get the notifier configuration\r\n     *\r\n     * @returns Notifier configuration\r\n     */\r\n    getConfig(): NotifierConfig;\r\n    /**\r\n     * API: Show a new notification\r\n     *\r\n     * @param notificationOptions Notification options\r\n     */\r\n    show(notificationOptions: NotifierNotificationOptions): void;\r\n    /**\r\n     * API: Hide a specific notification, given its ID\r\n     *\r\n     * @param notificationId ID of the notification to hide\r\n     */\r\n    hide(notificationId: string): void;\r\n    /**\r\n     * API: Hide the newest notification\r\n     */\r\n    hideNewest(): void;\r\n    /**\r\n     * API: Hide the oldest notification\r\n     */\r\n    hideOldest(): void;\r\n    /**\r\n     * API: Hide all notifications at once\r\n     */\r\n    hideAll(): void;\r\n    /**\r\n     * API: Shortcut for showing a new notification\r\n     *\r\n     * @param type             Type of the notification\r\n     * @param message          Message of the notification\r\n     * @param [notificationId] Unique ID for the notification (optional)\r\n     */\r\n    notify(type: string, message: string, notificationId?: string): void;\r\n}\r\n"]}