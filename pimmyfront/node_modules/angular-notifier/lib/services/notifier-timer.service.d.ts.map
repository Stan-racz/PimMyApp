{"version":3,"file":"notifier-timer.service.d.ts","sources":["notifier-timer.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * Notifier timer service\r\n *\r\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\r\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\r\n */\r\nexport declare class NotifierTimerService {\r\n    /**\r\n     * Timestamp (in ms), created in the moment the timer starts\r\n     */\r\n    private now;\r\n    /**\r\n     * Remaining time (in ms)\r\n     */\r\n    private remaining;\r\n    /**\r\n     * Timeout ID, used for clearing the timeout later on\r\n     */\r\n    private timerId;\r\n    /**\r\n     * Promise resolve function, eventually getting called once the timer finishes\r\n     */\r\n    private finishPromiseResolver;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor();\r\n    /**\r\n     * Start (or resume) the timer\r\n     *\r\n     * @param   duration Timer duration, in ms\r\n     * @returns          Promise, resolved once the timer finishes\r\n     */\r\n    start(duration: number): Promise<void>;\r\n    /**\r\n     * Pause the timer\r\n     */\r\n    pause(): void;\r\n    /**\r\n     * Continue the timer\r\n     */\r\n    continue(): void;\r\n    /**\r\n     * Stop the timer\r\n     */\r\n    stop(): void;\r\n    /**\r\n     * Finish up the timeout by resolving the timer promise\r\n     */\r\n    private finish;\r\n}\r\n"]}