{"version":3,"file":"notifier-notification.component.d.ts","sources":["notifier-notification.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, Renderer2 } from '@angular/core';\r\nimport { NotifierConfig } from '../models/notifier-config.model';\r\nimport { NotifierNotification } from '../models/notifier-notification.model';\r\nimport { NotifierService } from '../services/notifier.service';\r\nimport { NotifierAnimationService } from '../services/notifier-animation.service';\r\nimport { NotifierTimerService } from '../services/notifier-timer.service';\r\n/**\r\n * Notifier notification component\r\n * -------------------------------\r\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\r\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\r\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\r\n * mouse movements.\r\n */\r\nexport declare class NotifierNotificationComponent implements AfterViewInit {\r\n    /**\r\n     * Input: Notification object, contains all details necessary to construct the notification\r\n     */\r\n    notification: NotifierNotification;\r\n    /**\r\n     * Output: Ready event, handles the initialization success by emitting a reference to this notification component\r\n     */\r\n    ready: EventEmitter<NotifierNotificationComponent>;\r\n    /**\r\n     * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\r\n     */\r\n    dismiss: EventEmitter<string>;\r\n    /**\r\n     * Notifier configuration\r\n     */\r\n    readonly config: NotifierConfig;\r\n    /**\r\n     * Notifier timer service\r\n     */\r\n    private readonly timerService;\r\n    /**\r\n     * Notifier animation service\r\n     */\r\n    private readonly animationService;\r\n    /**\r\n     * Angular renderer, used to preserve the overall DOM abstraction & independence\r\n     */\r\n    private readonly renderer;\r\n    /**\r\n     * Native element reference, used for manipulating DOM properties\r\n     */\r\n    private readonly element;\r\n    /**\r\n     * Current notification height, calculated and cached here (#perfmatters)\r\n     */\r\n    private elementHeight;\r\n    /**\r\n     * Current notification width, calculated and cached here (#perfmatters)\r\n     */\r\n    private elementWidth;\r\n    /**\r\n     * Current notification shift, calculated and cached here (#perfmatters)\r\n     */\r\n    private elementShift;\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param elementRef               Reference to the component's element\r\n     * @param renderer                 Angular renderer\r\n     * @param notifierService          Notifier service\r\n     * @param notifierTimerService     Notifier timer service\r\n     * @param notifierAnimationService Notifier animation service\r\n     */\r\n    constructor(elementRef: ElementRef, renderer: Renderer2, notifierService: NotifierService, notifierTimerService: NotifierTimerService, notifierAnimationService: NotifierAnimationService);\r\n    /**\r\n     * Component after view init lifecycle hook, setts up the component and then emits the ready event\r\n     */\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * Get the notifier config\r\n     *\r\n     * @returns Notifier configuration\r\n     */\r\n    getConfig(): NotifierConfig;\r\n    /**\r\n     * Get notification element height (in px)\r\n     *\r\n     * @returns Notification element height (in px)\r\n     */\r\n    getHeight(): number;\r\n    /**\r\n     * Get notification element width (in px)\r\n     *\r\n     * @returns Notification element height (in px)\r\n     */\r\n    getWidth(): number;\r\n    /**\r\n     * Get notification shift offset (in px)\r\n     *\r\n     * @returns Notification element shift offset (in px)\r\n     */\r\n    getShift(): number;\r\n    /**\r\n     * Show (animate in) this notification\r\n     *\r\n     * @returns Promise, resolved when done\r\n     */\r\n    show(): Promise<void>;\r\n    /**\r\n     * Hide (animate out) this notification\r\n     *\r\n     * @returns Promise, resolved when done\r\n     */\r\n    hide(): Promise<void>;\r\n    /**\r\n     * Shift (move) this notification\r\n     *\r\n     * @param   distance         Distance to shift (in px)\r\n     * @param   shiftToMakePlace Flag, defining in which direction to shift\r\n     * @returns Promise, resolved when done\r\n     */\r\n    shift(distance: number, shiftToMakePlace: boolean): Promise<void>;\r\n    /**\r\n     * Handle click on dismiss button\r\n     */\r\n    onClickDismiss(): void;\r\n    /**\r\n     * Handle mouseover over notification area\r\n     */\r\n    onNotificationMouseover(): void;\r\n    /**\r\n     * Handle mouseout from notification area\r\n     */\r\n    onNotificationMouseout(): void;\r\n    /**\r\n     * Handle click on notification area\r\n     */\r\n    onNotificationClick(): void;\r\n    /**\r\n     * Start the auto hide timer (if enabled)\r\n     */\r\n    private startAutoHideTimer;\r\n    /**\r\n     * Pause the auto hide timer (if enabled)\r\n     */\r\n    private pauseAutoHideTimer;\r\n    /**\r\n     * Continue the auto hide timer (if enabled)\r\n     */\r\n    private continueAutoHideTimer;\r\n    /**\r\n     * Stop the auto hide timer (if enabled)\r\n     */\r\n    private stopAutoHideTimer;\r\n    /**\r\n     * Initial notification setup\r\n     */\r\n    private setup;\r\n}\r\n"]}